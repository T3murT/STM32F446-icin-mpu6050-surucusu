
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044fc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004714  08004714  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004714  08004714  00005714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800471c  0800471c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004724  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000005c  08004780  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08004780  000062e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baf9  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c12  00000000  00000000  00011b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00013798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f5  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002165c  00000000  00000000  000149b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de77  00000000  00000000  00036011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf03  00000000  00000000  00043e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ed8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d50  00000000  00000000  0010edd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00111b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080046ac 	.word	0x080046ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	080046ac 	.word	0x080046ac

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b988 	b.w	8000b9c <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	468e      	mov	lr, r1
 80008ac:	4604      	mov	r4, r0
 80008ae:	4688      	mov	r8, r1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d14a      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4617      	mov	r7, r2
 80008b8:	d962      	bls.n	8000980 <__udivmoddi4+0xdc>
 80008ba:	fab2 f682 	clz	r6, r2
 80008be:	b14e      	cbz	r6, 80008d4 <__udivmoddi4+0x30>
 80008c0:	f1c6 0320 	rsb	r3, r6, #32
 80008c4:	fa01 f806 	lsl.w	r8, r1, r6
 80008c8:	fa20 f303 	lsr.w	r3, r0, r3
 80008cc:	40b7      	lsls	r7, r6
 80008ce:	ea43 0808 	orr.w	r8, r3, r8
 80008d2:	40b4      	lsls	r4, r6
 80008d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008d8:	fa1f fc87 	uxth.w	ip, r7
 80008dc:	fbb8 f1fe 	udiv	r1, r8, lr
 80008e0:	0c23      	lsrs	r3, r4, #16
 80008e2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ea:	fb01 f20c 	mul.w	r2, r1, ip
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d909      	bls.n	8000906 <__udivmoddi4+0x62>
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008f8:	f080 80ea 	bcs.w	8000ad0 <__udivmoddi4+0x22c>
 80008fc:	429a      	cmp	r2, r3
 80008fe:	f240 80e7 	bls.w	8000ad0 <__udivmoddi4+0x22c>
 8000902:	3902      	subs	r1, #2
 8000904:	443b      	add	r3, r7
 8000906:	1a9a      	subs	r2, r3, r2
 8000908:	b2a3      	uxth	r3, r4
 800090a:	fbb2 f0fe 	udiv	r0, r2, lr
 800090e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000916:	fb00 fc0c 	mul.w	ip, r0, ip
 800091a:	459c      	cmp	ip, r3
 800091c:	d909      	bls.n	8000932 <__udivmoddi4+0x8e>
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	f100 32ff 	add.w	r2, r0, #4294967295
 8000924:	f080 80d6 	bcs.w	8000ad4 <__udivmoddi4+0x230>
 8000928:	459c      	cmp	ip, r3
 800092a:	f240 80d3 	bls.w	8000ad4 <__udivmoddi4+0x230>
 800092e:	443b      	add	r3, r7
 8000930:	3802      	subs	r0, #2
 8000932:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000936:	eba3 030c 	sub.w	r3, r3, ip
 800093a:	2100      	movs	r1, #0
 800093c:	b11d      	cbz	r5, 8000946 <__udivmoddi4+0xa2>
 800093e:	40f3      	lsrs	r3, r6
 8000940:	2200      	movs	r2, #0
 8000942:	e9c5 3200 	strd	r3, r2, [r5]
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d905      	bls.n	800095a <__udivmoddi4+0xb6>
 800094e:	b10d      	cbz	r5, 8000954 <__udivmoddi4+0xb0>
 8000950:	e9c5 0100 	strd	r0, r1, [r5]
 8000954:	2100      	movs	r1, #0
 8000956:	4608      	mov	r0, r1
 8000958:	e7f5      	b.n	8000946 <__udivmoddi4+0xa2>
 800095a:	fab3 f183 	clz	r1, r3
 800095e:	2900      	cmp	r1, #0
 8000960:	d146      	bne.n	80009f0 <__udivmoddi4+0x14c>
 8000962:	4573      	cmp	r3, lr
 8000964:	d302      	bcc.n	800096c <__udivmoddi4+0xc8>
 8000966:	4282      	cmp	r2, r0
 8000968:	f200 8105 	bhi.w	8000b76 <__udivmoddi4+0x2d2>
 800096c:	1a84      	subs	r4, r0, r2
 800096e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000972:	2001      	movs	r0, #1
 8000974:	4690      	mov	r8, r2
 8000976:	2d00      	cmp	r5, #0
 8000978:	d0e5      	beq.n	8000946 <__udivmoddi4+0xa2>
 800097a:	e9c5 4800 	strd	r4, r8, [r5]
 800097e:	e7e2      	b.n	8000946 <__udivmoddi4+0xa2>
 8000980:	2a00      	cmp	r2, #0
 8000982:	f000 8090 	beq.w	8000aa6 <__udivmoddi4+0x202>
 8000986:	fab2 f682 	clz	r6, r2
 800098a:	2e00      	cmp	r6, #0
 800098c:	f040 80a4 	bne.w	8000ad8 <__udivmoddi4+0x234>
 8000990:	1a8a      	subs	r2, r1, r2
 8000992:	0c03      	lsrs	r3, r0, #16
 8000994:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000998:	b280      	uxth	r0, r0
 800099a:	b2bc      	uxth	r4, r7
 800099c:	2101      	movs	r1, #1
 800099e:	fbb2 fcfe 	udiv	ip, r2, lr
 80009a2:	fb0e 221c 	mls	r2, lr, ip, r2
 80009a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009aa:	fb04 f20c 	mul.w	r2, r4, ip
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d907      	bls.n	80009c2 <__udivmoddi4+0x11e>
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009b8:	d202      	bcs.n	80009c0 <__udivmoddi4+0x11c>
 80009ba:	429a      	cmp	r2, r3
 80009bc:	f200 80e0 	bhi.w	8000b80 <__udivmoddi4+0x2dc>
 80009c0:	46c4      	mov	ip, r8
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	fbb3 f2fe 	udiv	r2, r3, lr
 80009c8:	fb0e 3312 	mls	r3, lr, r2, r3
 80009cc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009d0:	fb02 f404 	mul.w	r4, r2, r4
 80009d4:	429c      	cmp	r4, r3
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x144>
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	f102 30ff 	add.w	r0, r2, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x142>
 80009e0:	429c      	cmp	r4, r3
 80009e2:	f200 80ca 	bhi.w	8000b7a <__udivmoddi4+0x2d6>
 80009e6:	4602      	mov	r2, r0
 80009e8:	1b1b      	subs	r3, r3, r4
 80009ea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009ee:	e7a5      	b.n	800093c <__udivmoddi4+0x98>
 80009f0:	f1c1 0620 	rsb	r6, r1, #32
 80009f4:	408b      	lsls	r3, r1
 80009f6:	fa22 f706 	lsr.w	r7, r2, r6
 80009fa:	431f      	orrs	r7, r3
 80009fc:	fa0e f401 	lsl.w	r4, lr, r1
 8000a00:	fa20 f306 	lsr.w	r3, r0, r6
 8000a04:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a12:	fa1f fc87 	uxth.w	ip, r7
 8000a16:	fbbe f0f9 	udiv	r0, lr, r9
 8000a1a:	0c1c      	lsrs	r4, r3, #16
 8000a1c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a20:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a24:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a28:	45a6      	cmp	lr, r4
 8000a2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x1a0>
 8000a30:	193c      	adds	r4, r7, r4
 8000a32:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a36:	f080 809c 	bcs.w	8000b72 <__udivmoddi4+0x2ce>
 8000a3a:	45a6      	cmp	lr, r4
 8000a3c:	f240 8099 	bls.w	8000b72 <__udivmoddi4+0x2ce>
 8000a40:	3802      	subs	r0, #2
 8000a42:	443c      	add	r4, r7
 8000a44:	eba4 040e 	sub.w	r4, r4, lr
 8000a48:	fa1f fe83 	uxth.w	lr, r3
 8000a4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a50:	fb09 4413 	mls	r4, r9, r3, r4
 8000a54:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a58:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a5c:	45a4      	cmp	ip, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x1ce>
 8000a60:	193c      	adds	r4, r7, r4
 8000a62:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a66:	f080 8082 	bcs.w	8000b6e <__udivmoddi4+0x2ca>
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d97f      	bls.n	8000b6e <__udivmoddi4+0x2ca>
 8000a6e:	3b02      	subs	r3, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a76:	eba4 040c 	sub.w	r4, r4, ip
 8000a7a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a7e:	4564      	cmp	r4, ip
 8000a80:	4673      	mov	r3, lr
 8000a82:	46e1      	mov	r9, ip
 8000a84:	d362      	bcc.n	8000b4c <__udivmoddi4+0x2a8>
 8000a86:	d05f      	beq.n	8000b48 <__udivmoddi4+0x2a4>
 8000a88:	b15d      	cbz	r5, 8000aa2 <__udivmoddi4+0x1fe>
 8000a8a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a8e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a92:	fa04 f606 	lsl.w	r6, r4, r6
 8000a96:	fa22 f301 	lsr.w	r3, r2, r1
 8000a9a:	431e      	orrs	r6, r3
 8000a9c:	40cc      	lsrs	r4, r1
 8000a9e:	e9c5 6400 	strd	r6, r4, [r5]
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	e74f      	b.n	8000946 <__udivmoddi4+0xa2>
 8000aa6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000aaa:	0c01      	lsrs	r1, r0, #16
 8000aac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ab0:	b280      	uxth	r0, r0
 8000ab2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4638      	mov	r0, r7
 8000aba:	463c      	mov	r4, r7
 8000abc:	46b8      	mov	r8, r7
 8000abe:	46be      	mov	lr, r7
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ac6:	eba2 0208 	sub.w	r2, r2, r8
 8000aca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ace:	e766      	b.n	800099e <__udivmoddi4+0xfa>
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	e718      	b.n	8000906 <__udivmoddi4+0x62>
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	e72c      	b.n	8000932 <__udivmoddi4+0x8e>
 8000ad8:	f1c6 0220 	rsb	r2, r6, #32
 8000adc:	fa2e f302 	lsr.w	r3, lr, r2
 8000ae0:	40b7      	lsls	r7, r6
 8000ae2:	40b1      	lsls	r1, r6
 8000ae4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	430a      	orrs	r2, r1
 8000aee:	fbb3 f8fe 	udiv	r8, r3, lr
 8000af2:	b2bc      	uxth	r4, r7
 8000af4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000af8:	0c11      	lsrs	r1, r2, #16
 8000afa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000afe:	fb08 f904 	mul.w	r9, r8, r4
 8000b02:	40b0      	lsls	r0, r6
 8000b04:	4589      	cmp	r9, r1
 8000b06:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b0a:	b280      	uxth	r0, r0
 8000b0c:	d93e      	bls.n	8000b8c <__udivmoddi4+0x2e8>
 8000b0e:	1879      	adds	r1, r7, r1
 8000b10:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b14:	d201      	bcs.n	8000b1a <__udivmoddi4+0x276>
 8000b16:	4589      	cmp	r9, r1
 8000b18:	d81f      	bhi.n	8000b5a <__udivmoddi4+0x2b6>
 8000b1a:	eba1 0109 	sub.w	r1, r1, r9
 8000b1e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b22:	fb09 f804 	mul.w	r8, r9, r4
 8000b26:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b30:	4542      	cmp	r2, r8
 8000b32:	d229      	bcs.n	8000b88 <__udivmoddi4+0x2e4>
 8000b34:	18ba      	adds	r2, r7, r2
 8000b36:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b3a:	d2c4      	bcs.n	8000ac6 <__udivmoddi4+0x222>
 8000b3c:	4542      	cmp	r2, r8
 8000b3e:	d2c2      	bcs.n	8000ac6 <__udivmoddi4+0x222>
 8000b40:	f1a9 0102 	sub.w	r1, r9, #2
 8000b44:	443a      	add	r2, r7
 8000b46:	e7be      	b.n	8000ac6 <__udivmoddi4+0x222>
 8000b48:	45f0      	cmp	r8, lr
 8000b4a:	d29d      	bcs.n	8000a88 <__udivmoddi4+0x1e4>
 8000b4c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b50:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b54:	3801      	subs	r0, #1
 8000b56:	46e1      	mov	r9, ip
 8000b58:	e796      	b.n	8000a88 <__udivmoddi4+0x1e4>
 8000b5a:	eba7 0909 	sub.w	r9, r7, r9
 8000b5e:	4449      	add	r1, r9
 8000b60:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b64:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b68:	fb09 f804 	mul.w	r8, r9, r4
 8000b6c:	e7db      	b.n	8000b26 <__udivmoddi4+0x282>
 8000b6e:	4673      	mov	r3, lr
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1ce>
 8000b72:	4650      	mov	r0, sl
 8000b74:	e766      	b.n	8000a44 <__udivmoddi4+0x1a0>
 8000b76:	4608      	mov	r0, r1
 8000b78:	e6fd      	b.n	8000976 <__udivmoddi4+0xd2>
 8000b7a:	443b      	add	r3, r7
 8000b7c:	3a02      	subs	r2, #2
 8000b7e:	e733      	b.n	80009e8 <__udivmoddi4+0x144>
 8000b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b84:	443b      	add	r3, r7
 8000b86:	e71c      	b.n	80009c2 <__udivmoddi4+0x11e>
 8000b88:	4649      	mov	r1, r9
 8000b8a:	e79c      	b.n	8000ac6 <__udivmoddi4+0x222>
 8000b8c:	eba1 0109 	sub.w	r1, r1, r9
 8000b90:	46c4      	mov	ip, r8
 8000b92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b96:	fb09 f804 	mul.w	r8, r9, r4
 8000b9a:	e7c4      	b.n	8000b26 <__udivmoddi4+0x282>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ba4:	f000 ff3c 	bl	8001a20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ba8:	f000 f82a 	bl	8000c00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bac:	f000 f8f2 	bl	8000d94 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000bb0:	f000 f8c6 	bl	8000d40 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000bb4:	f000 f896 	bl	8000ce4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	TT_Init_MPU6050();
 8000bb8:	f000 fadc 	bl	8001174 <TT_Init_MPU6050>
	TT_Get_Gyro_Cal_Values();
 8000bbc:	f000 fb1c 	bl	80011f8 <TT_Get_Gyro_Cal_Values>

	// EKLENDİ: Bu adım, Kalman filtresini başlatmak için ZORUNLUDUR.
	TT_Kalman_Init();
 8000bc0:	f000 fb96 	bl	80012f0 <TT_Kalman_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		pitch = TT_Get_Pitch_Angle();
 8000bc4:	f000 fdde 	bl	8001784 <TT_Get_Pitch_Angle>
 8000bc8:	eef0 7a40 	vmov.f32	s15, s0
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <main+0x54>)
 8000bce:	edc3 7a00 	vstr	s15, [r3]
		roll = TT_Get_Roll_Angle();
 8000bd2:	f000 fde5 	bl	80017a0 <TT_Get_Roll_Angle>
 8000bd6:	eef0 7a40 	vmov.f32	s15, s0
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <main+0x58>)
 8000bdc:	edc3 7a00 	vstr	s15, [r3]
		yaw = TT_Get_Yaw_Angle();
 8000be0:	f000 fdec 	bl	80017bc <TT_Get_Yaw_Angle>
 8000be4:	eef0 7a40 	vmov.f32	s15, s0
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <main+0x5c>)
 8000bea:	edc3 7a00 	vstr	s15, [r3]
		pitch = TT_Get_Pitch_Angle();
 8000bee:	bf00      	nop
 8000bf0:	e7e8      	b.n	8000bc4 <main+0x24>
 8000bf2:	bf00      	nop
 8000bf4:	20000114 	.word	0x20000114
 8000bf8:	20000118 	.word	0x20000118
 8000bfc:	2000011c 	.word	0x2000011c

08000c00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	@ 0x50
 8000c04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2234      	movs	r2, #52	@ 0x34
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 fb7c 	bl	800430c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <SystemClock_Config+0xdc>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cdc <SystemClock_Config+0xdc>)
 8000c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <SystemClock_Config+0xdc>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c40:	2300      	movs	r3, #0
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <SystemClock_Config+0xe0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a25      	ldr	r2, [pc, #148]	@ (8000ce0 <SystemClock_Config+0xe0>)
 8000c4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <SystemClock_Config+0xe0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c60:	2301      	movs	r3, #1
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c64:	2310      	movs	r3, #16
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000c70:	2308      	movs	r3, #8
 8000c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000c74:	23b4      	movs	r3, #180	@ 0xb4
 8000c76:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fddd 	bl	8003848 <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x98>
		Error_Handler();
 8000c94:	f000 f92c 	bl	8000ef0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000c98:	f002 fa3c 	bl	8003114 <HAL_PWREx_EnableOverDrive>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xa6>
		Error_Handler();
 8000ca2:	f000 f925 	bl	8000ef0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2302      	movs	r3, #2
 8000cac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cb6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cbc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2105      	movs	r1, #5
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fa75 	bl	80031b4 <HAL_RCC_ClockConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0xd4>
		Error_Handler();
 8000cd0:	f000 f90e 	bl	8000ef0 <Error_Handler>
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	3750      	adds	r7, #80	@ 0x50
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000cea:	4a13      	ldr	r2, [pc, #76]	@ (8000d38 <MX_I2C1_Init+0x54>)
 8000cec:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000cf0:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <MX_I2C1_Init+0x58>)
 8000cf2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d06:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d20:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <MX_I2C1_Init+0x50>)
 8000d22:	f001 f9d3 	bl	80020cc <HAL_I2C_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000d2c:	f000 f8e0 	bl	8000ef0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000078 	.word	0x20000078
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	00061a80 	.word	0x00061a80

08000d40 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d78:	f003 f804 	bl	8003d84 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000d82:	f000 f8b5 	bl	8000ef0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000cc 	.word	0x200000cc
 8000d90:	40004400 	.word	0x40004400

08000d94 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b4c      	ldr	r3, [pc, #304]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a4b      	ldr	r2, [pc, #300]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b49      	ldr	r3, [pc, #292]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a44      	ldr	r2, [pc, #272]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b42      	ldr	r3, [pc, #264]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a3d      	ldr	r2, [pc, #244]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b37      	ldr	r3, [pc, #220]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a36      	ldr	r2, [pc, #216]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8000e36:	2200      	movs	r2, #0
 8000e38:	f641 410f 	movw	r1, #7183	@ 0x1c0f
 8000e3c:	4829      	ldr	r0, [pc, #164]	@ (8000ee4 <MX_GPIO_Init+0x150>)
 8000e3e:	f001 f92b 	bl	8002098 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_10
					| GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2120      	movs	r1, #32
 8000e46:	4828      	ldr	r0, [pc, #160]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000e48:	f001 f926 	bl	8002098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4826      	ldr	r0, [pc, #152]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000e52:	f001 f921 	bl	8002098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000e56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481d      	ldr	r0, [pc, #116]	@ (8000ee4 <MX_GPIO_Init+0x150>)
 8000e6e:	f000 ff7f 	bl	8001d70 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 PC2 PC3
	 PC10 PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000e72:	f641 430f 	movw	r3, #7183	@ 0x1c0f
 8000e76:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4816      	ldr	r0, [pc, #88]	@ (8000ee4 <MX_GPIO_Init+0x150>)
 8000e8c:	f000 ff70 	bl	8001d70 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000e90:	2320      	movs	r3, #32
 8000e92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <MX_GPIO_Init+0x154>)
 8000ea8:	f000 ff62 	bl	8001d70 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eac:	2304      	movs	r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480a      	ldr	r0, [pc, #40]	@ (8000eec <MX_GPIO_Init+0x158>)
 8000ec4:	f000 ff54 	bl	8001d70 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2028      	movs	r0, #40	@ 0x28
 8000ece:	f000 ff18 	bl	8001d02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ed2:	2028      	movs	r0, #40	@ 0x28
 8000ed4:	f000 ff31 	bl	8001d3a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	@ 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020c00 	.word	0x40020c00

08000ef0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <Error_Handler+0x8>

08000efc <Kalman_init>:

#include "mpu6050.h"

// ---------------- Kalman Filtresi Fonksiyonları ----------------

void Kalman_init(Kalman_t *Kalman) {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    Kalman->Q_angle = 0.05f;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a13      	ldr	r2, [pc, #76]	@ (8000f54 <Kalman_init+0x58>)
 8000f08:	601a      	str	r2, [r3, #0]
    Kalman->Q_bias = 0.001f;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a12      	ldr	r2, [pc, #72]	@ (8000f58 <Kalman_init+0x5c>)
 8000f0e:	605a      	str	r2, [r3, #4]
    Kalman->R_measure = 0.5f;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000f16:	609a      	str	r2, [r3, #8]
    Kalman->angle = 0.0f;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
    Kalman->bias = 0.0f;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
    Kalman->P[0][0] = Kalman->P[0][1] = 0.0f;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69da      	ldr	r2, [r3, #28]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
    Kalman->P[1][0] = Kalman->P[1][1] = 0.0f;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	621a      	str	r2, [r3, #32]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	3d4ccccd 	.word	0x3d4ccccd
 8000f58:	3a83126f 	.word	0x3a83126f

08000f5c <Kalman_getAngle>:

float Kalman_getAngle(Kalman_t *Kalman, float newAngle, float newRate, float dt) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b08b      	sub	sp, #44	@ 0x2c
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f68:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f6c:	ed87 1a00 	vstr	s2, [r7]
    Kalman->rate = newRate - Kalman->bias;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	edc3 7a05 	vstr	s15, [r3, #20]
    Kalman->angle += dt * Kalman->rate;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f90:	edd7 7a00 	vldr	s15, [r7]
 8000f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	edc3 7a03 	vstr	s15, [r3, #12]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8000fae:	edd7 7a00 	vldr	s15, [r7]
 8000fb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fc6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000fd4:	edd7 7a00 	vldr	s15, [r7]
 8000fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	edc3 7a06 	vstr	s15, [r3, #24]
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ed93 7a07 	vldr	s14, [r3, #28]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8000ff2:	edd7 7a00 	vldr	s15, [r7]
 8000ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	edc3 7a07 	vstr	s15, [r3, #28]
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	ed93 7a08 	vldr	s14, [r3, #32]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001010:	edd7 7a00 	vldr	s15, [r7]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	edc3 7a08 	vstr	s15, [r3, #32]
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	edd3 6a01 	vldr	s13, [r3, #4]
 800102e:	edd7 7a00 	vldr	s15, [r7]
 8001032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    float S = Kalman->P[0][0] + Kalman->R_measure;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	ed93 7a06 	vldr	s14, [r3, #24]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	edd3 7a02 	vldr	s15, [r3, #8]
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float K[2];
    K[0] = Kalman->P[0][0] / S;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	edd3 6a06 	vldr	s13, [r3, #24]
 800105a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800105e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001062:	edc7 7a04 	vstr	s15, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	edd3 6a08 	vldr	s13, [r3, #32]
 800106c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001074:	edc7 7a05 	vstr	s15, [r7, #20]

    float y = newAngle - Kalman->angle;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	edd3 7a03 	vldr	s15, [r3, #12]
 800107e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001086:	edc7 7a08 	vstr	s15, [r7, #32]
    Kalman->angle += K[0] * y;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001090:	edd7 6a04 	vldr	s13, [r7, #16]
 8001094:	edd7 7a08 	vldr	s15, [r7, #32]
 8001098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	edc3 7a03 	vstr	s15, [r3, #12]
    Kalman->bias  += K[1] * y;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80010ac:	edd7 6a05 	vldr	s13, [r7, #20]
 80010b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	edc3 7a04 	vstr	s15, [r3, #16]

    float P00_temp = Kalman->P[0][0];
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	61fb      	str	r3, [r7, #28]
    float P01_temp = Kalman->P[0][1];
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	61bb      	str	r3, [r7, #24]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80010d4:	edd7 6a04 	vldr	s13, [r7, #16]
 80010d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edc3 7a06 	vstr	s15, [r3, #24]
    Kalman->P[0][1] -= K[0] * P01_temp;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	ed93 7a07 	vldr	s14, [r3, #28]
 80010f0:	edd7 6a04 	vldr	s13, [r7, #16]
 80010f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	edc3 7a07 	vstr	s15, [r3, #28]
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ed93 7a08 	vldr	s14, [r3, #32]
 800110c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001110:	edd7 7a07 	vldr	s15, [r7, #28]
 8001114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edc3 7a08 	vstr	s15, [r3, #32]
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001128:	edd7 6a05 	vldr	s13, [r7, #20]
 800112c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return Kalman->angle;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	ee07 3a90 	vmov	s15, r3
}
 8001146:	eeb0 0a67 	vmov.f32	s0, s15
 800114a:	372c      	adds	r7, #44	@ 0x2c
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <Kalman_setAngle>:

void Kalman_setAngle(Kalman_t *Kalman, float angle) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
    Kalman->angle = angle;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	60da      	str	r2, [r3, #12]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <TT_Init_MPU6050>:

static Kalman_t kalman_filter_pitch, kalman_filter_roll;

static uint32_t last_tick = 0;

void TT_Init_MPU6050(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
    uint8_t data;

    data = 0x00; HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_POWER_1, 1, &data, 1, 100);
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	2364      	movs	r3, #100	@ 0x64
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	226b      	movs	r2, #107	@ 0x6b
 800118e:	21d0      	movs	r1, #208	@ 0xd0
 8001190:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <TT_Init_MPU6050+0x80>)
 8001192:	f001 f8df 	bl	8002354 <HAL_I2C_Mem_Write>
    data = 0x04; HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG, 1, &data, 1, 100);
 8001196:	2304      	movs	r3, #4
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	2364      	movs	r3, #100	@ 0x64
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	221a      	movs	r2, #26
 80011aa:	21d0      	movs	r1, #208	@ 0xd0
 80011ac:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <TT_Init_MPU6050+0x80>)
 80011ae:	f001 f8d1 	bl	8002354 <HAL_I2C_Mem_Write>
    data = 0x10; HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCE_CONFIG, 1, &data, 1, 100);
 80011b2:	2310      	movs	r3, #16
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	2364      	movs	r3, #100	@ 0x64
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	221c      	movs	r2, #28
 80011c6:	21d0      	movs	r1, #208	@ 0xd0
 80011c8:	480a      	ldr	r0, [pc, #40]	@ (80011f4 <TT_Init_MPU6050+0x80>)
 80011ca:	f001 f8c3 	bl	8002354 <HAL_I2C_Mem_Write>
    data = 0x08; HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, &data, 1, 100);
 80011ce:	2308      	movs	r3, #8
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	2364      	movs	r3, #100	@ 0x64
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	221b      	movs	r2, #27
 80011e2:	21d0      	movs	r1, #208	@ 0xd0
 80011e4:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <TT_Init_MPU6050+0x80>)
 80011e6:	f001 f8b5 	bl	8002354 <HAL_I2C_Mem_Write>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000078 	.word	0x20000078

080011f8 <TT_Get_Gyro_Cal_Values>:

void TT_Get_Gyro_Cal_Values(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	@ 0x30
 80011fc:	af04      	add	r7, sp, #16
    int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
    int16_t gx, gy, gz;
    uint8_t buf[6];

    for (int i = 0; i < 2000; i++) {
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	e039      	b.n	8001284 <TT_Get_Gyro_Cal_Values+0x8c>
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_MESURE, 1, buf, 6, HAL_MAX_DELAY);
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2306      	movs	r3, #6
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	2243      	movs	r2, #67	@ 0x43
 8001222:	21d0      	movs	r1, #208	@ 0xd0
 8001224:	482d      	ldr	r0, [pc, #180]	@ (80012dc <TT_Get_Gyro_Cal_Values+0xe4>)
 8001226:	f001 f98f 	bl	8002548 <HAL_I2C_Mem_Read>
        gx = (buf[0] << 8) | buf[1];
 800122a:	793b      	ldrb	r3, [r7, #4]
 800122c:	b21b      	sxth	r3, r3
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	797b      	ldrb	r3, [r7, #5]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	81fb      	strh	r3, [r7, #14]
        gy = (buf[2] << 8) | buf[3];
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	b21b      	sxth	r3, r3
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	81bb      	strh	r3, [r7, #12]
        gz = (buf[4] << 8) | buf[5];
 800124a:	7a3b      	ldrb	r3, [r7, #8]
 800124c:	b21b      	sxth	r3, r3
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	7a7b      	ldrb	r3, [r7, #9]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	817b      	strh	r3, [r7, #10]
        sum_x += gx; sum_y += gy; sum_z += gz;
 800125a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	4413      	add	r3, r2
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4413      	add	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
        HAL_Delay(3);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 fc43 	bl	8001b04 <HAL_Delay>
    for (int i = 0; i < 2000; i++) {
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	3301      	adds	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800128a:	dbc1      	blt.n	8001210 <TT_Get_Gyro_Cal_Values+0x18>
    }

    Gyro_Cal_X = sum_x / 2000.0f;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001296:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80012e0 <TT_Get_Gyro_Cal_Values+0xe8>
 800129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <TT_Get_Gyro_Cal_Values+0xec>)
 80012a0:	edc3 7a00 	vstr	s15, [r3]
    Gyro_Cal_Y = sum_y / 2000.0f;
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ae:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80012e0 <TT_Get_Gyro_Cal_Values+0xe8>
 80012b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <TT_Get_Gyro_Cal_Values+0xf0>)
 80012b8:	edc3 7a00 	vstr	s15, [r3]
    Gyro_Cal_Z = sum_z / 2000.0f;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c6:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80012e0 <TT_Get_Gyro_Cal_Values+0xe8>
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <TT_Get_Gyro_Cal_Values+0xf4>)
 80012d0:	edc3 7a00 	vstr	s15, [r3]
}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000078 	.word	0x20000078
 80012e0:	44fa0000 	.word	0x44fa0000
 80012e4:	2000013c 	.word	0x2000013c
 80012e8:	20000140 	.word	0x20000140
 80012ec:	20000144 	.word	0x20000144

080012f0 <TT_Kalman_Init>:

void TT_Kalman_Init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	ed2d 8b02 	vpush	{d8}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af04      	add	r7, sp, #16
    Kalman_init(&kalman_filter_pitch);
 80012fa:	485b      	ldr	r0, [pc, #364]	@ (8001468 <TT_Kalman_Init+0x178>)
 80012fc:	f7ff fdfe 	bl	8000efc <Kalman_init>
    Kalman_init(&kalman_filter_roll);
 8001300:	485a      	ldr	r0, [pc, #360]	@ (800146c <TT_Kalman_Init+0x17c>)
 8001302:	f7ff fdfb 	bl	8000efc <Kalman_init>

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCE_MESURE, 1, Acce_Buffer, 6, HAL_MAX_DELAY);
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2306      	movs	r3, #6
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <TT_Kalman_Init+0x180>)
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	223b      	movs	r2, #59	@ 0x3b
 8001318:	21d0      	movs	r1, #208	@ 0xd0
 800131a:	4856      	ldr	r0, [pc, #344]	@ (8001474 <TT_Kalman_Init+0x184>)
 800131c:	f001 f914 	bl	8002548 <HAL_I2C_Mem_Read>
    Acce_Raw_X = (Acce_Buffer[0] << 8) | Acce_Buffer[1];
 8001320:	4b53      	ldr	r3, [pc, #332]	@ (8001470 <TT_Kalman_Init+0x180>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b21b      	sxth	r3, r3
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <TT_Kalman_Init+0x180>)
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b50      	ldr	r3, [pc, #320]	@ (8001478 <TT_Kalman_Init+0x188>)
 8001336:	801a      	strh	r2, [r3, #0]
    Acce_Raw_Y = (Acce_Buffer[2] << 8) | Acce_Buffer[3];
 8001338:	4b4d      	ldr	r3, [pc, #308]	@ (8001470 <TT_Kalman_Init+0x180>)
 800133a:	789b      	ldrb	r3, [r3, #2]
 800133c:	b21b      	sxth	r3, r3
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <TT_Kalman_Init+0x180>)
 8001344:	78db      	ldrb	r3, [r3, #3]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <TT_Kalman_Init+0x18c>)
 800134e:	801a      	strh	r2, [r3, #0]
    Acce_Raw_Z = (Acce_Buffer[4] << 8) | Acce_Buffer[5];
 8001350:	4b47      	ldr	r3, [pc, #284]	@ (8001470 <TT_Kalman_Init+0x180>)
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	b21b      	sxth	r3, r3
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b45      	ldr	r3, [pc, #276]	@ (8001470 <TT_Kalman_Init+0x180>)
 800135c:	795b      	ldrb	r3, [r3, #5]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b46      	ldr	r3, [pc, #280]	@ (8001480 <TT_Kalman_Init+0x190>)
 8001366:	801a      	strh	r2, [r3, #0]

    float roll  = atan2f((float)Acce_Raw_Y, (float)Acce_Raw_Z) * (180.0f / M_PI);
 8001368:	4b44      	ldr	r3, [pc, #272]	@ (800147c <TT_Kalman_Init+0x18c>)
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001376:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <TT_Kalman_Init+0x190>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	ee07 3a10 	vmov	s14, r3
 8001380:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001384:	eef0 0a47 	vmov.f32	s1, s14
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	f002 fff0 	bl	8004370 <atan2f>
 8001390:	ee10 3a10 	vmov	r3, s0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f9c5 	bl	8000724 <__aeabi_f2d>
 800139a:	a331      	add	r3, pc, #196	@ (adr r3, 8001460 <TT_Kalman_Init+0x170>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff32 	bl	8000208 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fa12 	bl	80007d4 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	607b      	str	r3, [r7, #4]
    float pitch = atanf(-(float)Acce_Raw_X / sqrtf(Acce_Raw_Y * Acce_Raw_Y + Acce_Raw_Z * Acce_Raw_Z)) * (180.0f / M_PI);
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <TT_Kalman_Init+0x188>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c2:	eeb1 8a67 	vneg.f32	s16, s15
 80013c6:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <TT_Kalman_Init+0x18c>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <TT_Kalman_Init+0x18c>)
 80013d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d4:	fb03 f202 	mul.w	r2, r3, r2
 80013d8:	4b29      	ldr	r3, [pc, #164]	@ (8001480 <TT_Kalman_Init+0x190>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	4619      	mov	r1, r3
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <TT_Kalman_Init+0x190>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f4:	eeb0 0a67 	vmov.f32	s0, s15
 80013f8:	f002 ffbc 	bl	8004374 <sqrtf>
 80013fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001400:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001404:	eeb0 0a67 	vmov.f32	s0, s15
 8001408:	f002 ffd2 	bl	80043b0 <atanf>
 800140c:	ee10 3a10 	vmov	r3, s0
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f987 	bl	8000724 <__aeabi_f2d>
 8001416:	a312      	add	r3, pc, #72	@ (adr r3, 8001460 <TT_Kalman_Init+0x170>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7fe fef4 	bl	8000208 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff f9d4 	bl	80007d4 <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	603b      	str	r3, [r7, #0]

    Kalman_setAngle(&kalman_filter_pitch, pitch);
 8001430:	ed97 0a00 	vldr	s0, [r7]
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <TT_Kalman_Init+0x178>)
 8001436:	f7ff fe8d 	bl	8001154 <Kalman_setAngle>
    Kalman_setAngle(&kalman_filter_roll, roll);
 800143a:	ed97 0a01 	vldr	s0, [r7, #4]
 800143e:	480b      	ldr	r0, [pc, #44]	@ (800146c <TT_Kalman_Init+0x17c>)
 8001440:	f7ff fe88 	bl	8001154 <Kalman_setAngle>

    last_tick = HAL_GetTick();
 8001444:	f000 fb52 	bl	8001aec <HAL_GetTick>
 8001448:	4603      	mov	r3, r0
 800144a:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <TT_Kalman_Init+0x194>)
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	ecbd 8b02 	vpop	{d8}
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	1a63c1f8 	.word	0x1a63c1f8
 8001464:	404ca5dc 	.word	0x404ca5dc
 8001468:	20000154 	.word	0x20000154
 800146c:	2000017c 	.word	0x2000017c
 8001470:	20000128 	.word	0x20000128
 8001474:	20000078 	.word	0x20000078
 8001478:	20000134 	.word	0x20000134
 800147c:	20000136 	.word	0x20000136
 8001480:	20000138 	.word	0x20000138
 8001484:	200001a4 	.word	0x200001a4

08001488 <TT_Process_All_Values>:

static void TT_Process_All_Values(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	ed2d 8b02 	vpush	{d8}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af04      	add	r7, sp, #16
    float dt = (HAL_GetTick() - last_tick) / 1000.0f;
 8001492:	f000 fb2b 	bl	8001aec <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	4ba5      	ldr	r3, [pc, #660]	@ (8001730 <TT_Process_All_Values+0x2a8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014a6:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001734 <TT_Process_All_Values+0x2ac>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	edc7 7a05 	vstr	s15, [r7, #20]
    if (dt <= 0) dt = 0.001f;
 80014b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	d801      	bhi.n	80014c4 <TT_Process_All_Values+0x3c>
 80014c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001738 <TT_Process_All_Values+0x2b0>)
 80014c2:	617b      	str	r3, [r7, #20]
    last_tick = HAL_GetTick();
 80014c4:	f000 fb12 	bl	8001aec <HAL_GetTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a99      	ldr	r2, [pc, #612]	@ (8001730 <TT_Process_All_Values+0x2a8>)
 80014cc:	6013      	str	r3, [r2, #0]

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_MESURE, 1, Gyro_Buffer, 6, HAL_MAX_DELAY);
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	2306      	movs	r3, #6
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	4b98      	ldr	r3, [pc, #608]	@ (800173c <TT_Process_All_Values+0x2b4>)
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	2243      	movs	r2, #67	@ 0x43
 80014e0:	21d0      	movs	r1, #208	@ 0xd0
 80014e2:	4897      	ldr	r0, [pc, #604]	@ (8001740 <TT_Process_All_Values+0x2b8>)
 80014e4:	f001 f830 	bl	8002548 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCE_MESURE, 1, Acce_Buffer, 6, HAL_MAX_DELAY);
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2306      	movs	r3, #6
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	4b94      	ldr	r3, [pc, #592]	@ (8001744 <TT_Process_All_Values+0x2bc>)
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	223b      	movs	r2, #59	@ 0x3b
 80014fa:	21d0      	movs	r1, #208	@ 0xd0
 80014fc:	4890      	ldr	r0, [pc, #576]	@ (8001740 <TT_Process_All_Values+0x2b8>)
 80014fe:	f001 f823 	bl	8002548 <HAL_I2C_Mem_Read>

    Gyro_Raw_X = (Gyro_Buffer[0] << 8) | Gyro_Buffer[1];
 8001502:	4b8e      	ldr	r3, [pc, #568]	@ (800173c <TT_Process_All_Values+0x2b4>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b21b      	sxth	r3, r3
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	4b8b      	ldr	r3, [pc, #556]	@ (800173c <TT_Process_All_Values+0x2b4>)
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	4b8c      	ldr	r3, [pc, #560]	@ (8001748 <TT_Process_All_Values+0x2c0>)
 8001518:	801a      	strh	r2, [r3, #0]
    Gyro_Raw_Y = (Gyro_Buffer[2] << 8) | Gyro_Buffer[3];
 800151a:	4b88      	ldr	r3, [pc, #544]	@ (800173c <TT_Process_All_Values+0x2b4>)
 800151c:	789b      	ldrb	r3, [r3, #2]
 800151e:	b21b      	sxth	r3, r3
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b85      	ldr	r3, [pc, #532]	@ (800173c <TT_Process_All_Values+0x2b4>)
 8001526:	78db      	ldrb	r3, [r3, #3]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b87      	ldr	r3, [pc, #540]	@ (800174c <TT_Process_All_Values+0x2c4>)
 8001530:	801a      	strh	r2, [r3, #0]
    Gyro_Raw_Z = (Gyro_Buffer[4] << 8) | Gyro_Buffer[5];
 8001532:	4b82      	ldr	r3, [pc, #520]	@ (800173c <TT_Process_All_Values+0x2b4>)
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	b21b      	sxth	r3, r3
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	4b7f      	ldr	r3, [pc, #508]	@ (800173c <TT_Process_All_Values+0x2b4>)
 800153e:	795b      	ldrb	r3, [r3, #5]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b82      	ldr	r3, [pc, #520]	@ (8001750 <TT_Process_All_Values+0x2c8>)
 8001548:	801a      	strh	r2, [r3, #0]

    Acce_Raw_X = (Acce_Buffer[0] << 8) | Acce_Buffer[1];
 800154a:	4b7e      	ldr	r3, [pc, #504]	@ (8001744 <TT_Process_All_Values+0x2bc>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b21b      	sxth	r3, r3
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b7b      	ldr	r3, [pc, #492]	@ (8001744 <TT_Process_All_Values+0x2bc>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	4b7d      	ldr	r3, [pc, #500]	@ (8001754 <TT_Process_All_Values+0x2cc>)
 8001560:	801a      	strh	r2, [r3, #0]
    Acce_Raw_Y = (Acce_Buffer[2] << 8) | Acce_Buffer[3];
 8001562:	4b78      	ldr	r3, [pc, #480]	@ (8001744 <TT_Process_All_Values+0x2bc>)
 8001564:	789b      	ldrb	r3, [r3, #2]
 8001566:	b21b      	sxth	r3, r3
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	4b75      	ldr	r3, [pc, #468]	@ (8001744 <TT_Process_All_Values+0x2bc>)
 800156e:	78db      	ldrb	r3, [r3, #3]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b78      	ldr	r3, [pc, #480]	@ (8001758 <TT_Process_All_Values+0x2d0>)
 8001578:	801a      	strh	r2, [r3, #0]
    Acce_Raw_Z = (Acce_Buffer[4] << 8) | Acce_Buffer[5];
 800157a:	4b72      	ldr	r3, [pc, #456]	@ (8001744 <TT_Process_All_Values+0x2bc>)
 800157c:	791b      	ldrb	r3, [r3, #4]
 800157e:	b21b      	sxth	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b6f      	ldr	r3, [pc, #444]	@ (8001744 <TT_Process_All_Values+0x2bc>)
 8001586:	795b      	ldrb	r3, [r3, #5]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	4b73      	ldr	r3, [pc, #460]	@ (800175c <TT_Process_All_Values+0x2d4>)
 8001590:	801a      	strh	r2, [r3, #0]

    float gyro_pitch = ((float)Gyro_Raw_X - Gyro_Cal_X) / 65.5f;
 8001592:	4b6d      	ldr	r3, [pc, #436]	@ (8001748 <TT_Process_All_Values+0x2c0>)
 8001594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001760 <TT_Process_All_Values+0x2d8>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015aa:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8001764 <TT_Process_All_Values+0x2dc>
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	edc7 7a04 	vstr	s15, [r7, #16]
    float gyro_roll  = ((float)Gyro_Raw_Y - Gyro_Cal_Y) / 65.5f;
 80015b6:	4b65      	ldr	r3, [pc, #404]	@ (800174c <TT_Process_All_Values+0x2c4>)
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <TT_Process_All_Values+0x2e0>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ce:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001764 <TT_Process_All_Values+0x2dc>
 80015d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d6:	edc7 7a03 	vstr	s15, [r7, #12]
    float gyro_yaw   = ((float)Gyro_Raw_Z - Gyro_Cal_Z) / 65.5f;
 80015da:	4b5d      	ldr	r3, [pc, #372]	@ (8001750 <TT_Process_All_Values+0x2c8>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e8:	4b60      	ldr	r3, [pc, #384]	@ (800176c <TT_Process_All_Values+0x2e4>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f2:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8001764 <TT_Process_All_Values+0x2dc>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	edc7 7a02 	vstr	s15, [r7, #8]

    float acc_roll  = atan2f((float)Acce_Raw_Y, (float)Acce_Raw_Z) * (180.0f / M_PI);
 80015fe:	4b56      	ldr	r3, [pc, #344]	@ (8001758 <TT_Process_All_Values+0x2d0>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <TT_Process_All_Values+0x2d4>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	ee07 3a10 	vmov	s14, r3
 8001616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800161a:	eef0 0a47 	vmov.f32	s1, s14
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	f002 fea5 	bl	8004370 <atan2f>
 8001626:	ee10 3a10 	vmov	r3, s0
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f87a 	bl	8000724 <__aeabi_f2d>
 8001630:	a33d      	add	r3, pc, #244	@ (adr r3, 8001728 <TT_Process_All_Values+0x2a0>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe fde7 	bl	8000208 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff f8c7 	bl	80007d4 <__aeabi_d2f>
 8001646:	4603      	mov	r3, r0
 8001648:	607b      	str	r3, [r7, #4]
    float acc_pitch = atanf(-(float)Acce_Raw_X / sqrtf(Acce_Raw_Y * Acce_Raw_Y + Acce_Raw_Z * Acce_Raw_Z)) * (180.0f / M_PI);
 800164a:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <TT_Process_All_Values+0x2cc>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001658:	eeb1 8a67 	vneg.f32	s16, s15
 800165c:	4b3e      	ldr	r3, [pc, #248]	@ (8001758 <TT_Process_All_Values+0x2d0>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	461a      	mov	r2, r3
 8001664:	4b3c      	ldr	r3, [pc, #240]	@ (8001758 <TT_Process_All_Values+0x2d0>)
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	fb03 f202 	mul.w	r2, r3, r2
 800166e:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <TT_Process_All_Values+0x2d4>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	4619      	mov	r1, r3
 8001676:	4b39      	ldr	r3, [pc, #228]	@ (800175c <TT_Process_All_Values+0x2d4>)
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	f002 fe71 	bl	8004374 <sqrtf>
 8001692:	eeb0 7a40 	vmov.f32	s14, s0
 8001696:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	f002 fe87 	bl	80043b0 <atanf>
 80016a2:	ee10 3a10 	vmov	r3, s0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f83c 	bl	8000724 <__aeabi_f2d>
 80016ac:	a31e      	add	r3, pc, #120	@ (adr r3, 8001728 <TT_Process_All_Values+0x2a0>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe fda9 	bl	8000208 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff f889 	bl	80007d4 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	603b      	str	r3, [r7, #0]

    kalman_pitch = Kalman_getAngle(&kalman_filter_pitch, acc_pitch, gyro_pitch, dt);
 80016c6:	ed97 1a05 	vldr	s2, [r7, #20]
 80016ca:	edd7 0a04 	vldr	s1, [r7, #16]
 80016ce:	ed97 0a00 	vldr	s0, [r7]
 80016d2:	4827      	ldr	r0, [pc, #156]	@ (8001770 <TT_Process_All_Values+0x2e8>)
 80016d4:	f7ff fc42 	bl	8000f5c <Kalman_getAngle>
 80016d8:	eef0 7a40 	vmov.f32	s15, s0
 80016dc:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <TT_Process_All_Values+0x2ec>)
 80016de:	edc3 7a00 	vstr	s15, [r3]
    kalman_roll  = Kalman_getAngle(&kalman_filter_roll, acc_roll, gyro_roll, dt);
 80016e2:	ed97 1a05 	vldr	s2, [r7, #20]
 80016e6:	edd7 0a03 	vldr	s1, [r7, #12]
 80016ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80016ee:	4822      	ldr	r0, [pc, #136]	@ (8001778 <TT_Process_All_Values+0x2f0>)
 80016f0:	f7ff fc34 	bl	8000f5c <Kalman_getAngle>
 80016f4:	eef0 7a40 	vmov.f32	s15, s0
 80016f8:	4b20      	ldr	r3, [pc, #128]	@ (800177c <TT_Process_All_Values+0x2f4>)
 80016fa:	edc3 7a00 	vstr	s15, [r3]

    angle_yaw_gyro += gyro_yaw * dt;
 80016fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001702:	edd7 7a05 	vldr	s15, [r7, #20]
 8001706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170a:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <TT_Process_All_Values+0x2f8>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <TT_Process_All_Values+0x2f8>)
 8001716:	edc3 7a00 	vstr	s15, [r3]
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	ecbd 8b02 	vpop	{d8}
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	1a63c1f8 	.word	0x1a63c1f8
 800172c:	404ca5dc 	.word	0x404ca5dc
 8001730:	200001a4 	.word	0x200001a4
 8001734:	447a0000 	.word	0x447a0000
 8001738:	3a83126f 	.word	0x3a83126f
 800173c:	20000120 	.word	0x20000120
 8001740:	20000078 	.word	0x20000078
 8001744:	20000128 	.word	0x20000128
 8001748:	2000012e 	.word	0x2000012e
 800174c:	20000130 	.word	0x20000130
 8001750:	20000132 	.word	0x20000132
 8001754:	20000134 	.word	0x20000134
 8001758:	20000136 	.word	0x20000136
 800175c:	20000138 	.word	0x20000138
 8001760:	2000013c 	.word	0x2000013c
 8001764:	42830000 	.word	0x42830000
 8001768:	20000140 	.word	0x20000140
 800176c:	20000144 	.word	0x20000144
 8001770:	20000154 	.word	0x20000154
 8001774:	20000148 	.word	0x20000148
 8001778:	2000017c 	.word	0x2000017c
 800177c:	2000014c 	.word	0x2000014c
 8001780:	20000150 	.word	0x20000150

08001784 <TT_Get_Pitch_Angle>:

float TT_Get_Pitch_Angle(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    TT_Process_All_Values();
 8001788:	f7ff fe7e 	bl	8001488 <TT_Process_All_Values>
    return kalman_pitch;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <TT_Get_Pitch_Angle+0x18>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	ee07 3a90 	vmov	s15, r3
}
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000148 	.word	0x20000148

080017a0 <TT_Get_Roll_Angle>:

float TT_Get_Roll_Angle(void) {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
    return kalman_roll;
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <TT_Get_Roll_Angle+0x18>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	ee07 3a90 	vmov	s15, r3
}
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	2000014c 	.word	0x2000014c

080017bc <TT_Get_Yaw_Angle>:

float TT_Get_Yaw_Angle(void) {
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
    return angle_yaw_gyro;
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <TT_Get_Yaw_Angle+0x18>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	ee07 3a90 	vmov	s15, r3
}
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	20000150 	.word	0x20000150

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <HAL_MspInit+0x4c>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_MspInit+0x4c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001816:	2007      	movs	r0, #7
 8001818:	f000 fa68 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_I2C_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12b      	bne.n	80018a2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001866:	23c0      	movs	r3, #192	@ 0xc0
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	2312      	movs	r3, #18
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001876:	2304      	movs	r3, #4
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <HAL_I2C_MspInit+0x8c>)
 8001882:	f000 fa75 	bl	8001d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001894:	6413      	str	r3, [r2, #64]	@ 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_I2C_MspInit+0x88>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40005400 	.word	0x40005400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020400 	.word	0x40020400

080018b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	@ (800193c <HAL_UART_MspInit+0x84>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d12b      	bne.n	8001932 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <HAL_UART_MspInit+0x88>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a17      	ldr	r2, [pc, #92]	@ (8001940 <HAL_UART_MspInit+0x88>)
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_UART_MspInit+0x88>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <HAL_UART_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a10      	ldr	r2, [pc, #64]	@ (8001940 <HAL_UART_MspInit+0x88>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_UART_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001912:	230c      	movs	r3, #12
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001922:	2307      	movs	r3, #7
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	@ (8001944 <HAL_UART_MspInit+0x8c>)
 800192e:	f000 fa1f 	bl	8001d70 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	@ 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40004400 	.word	0x40004400
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <NMI_Handler+0x4>

08001950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <MemManage_Handler+0x4>

08001960 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <UsageFault_Handler+0x4>

08001970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199e:	f000 f891 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019d0:	f7ff ffea 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	@ (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f002 fc95 	bl	8004328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff f8cf 	bl	8000ba0 <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a10:	08004724 	.word	0x08004724
  ldr r2, =_sbss
 8001a14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a18:	200002e4 	.word	0x200002e4

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	@ (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f94f 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fec0 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f967 	bl	8001d56 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f92f 	bl	8001d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	200001a8 	.word	0x200001a8

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	@ (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200001a8 	.word	0x200001a8

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4907      	ldr	r1, [pc, #28]	@ (8001be8 <__NVIC_EnableIRQ+0x38>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	@ (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	@ (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	@ 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	@ 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f7ff ff8e 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff29 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff3e 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff8e 	bl	8001c40 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff31 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e165      	b.n	8002058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	f040 8154 	bne.w	8002052 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d005      	beq.n	8001dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d130      	bne.n	8001e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 0201 	and.w	r2, r3, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d017      	beq.n	8001e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d123      	bne.n	8001eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	08da      	lsrs	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3208      	adds	r2, #8
 8001e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	08da      	lsrs	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	69b9      	ldr	r1, [r7, #24]
 8001eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80ae 	beq.w	8002052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b5d      	ldr	r3, [pc, #372]	@ (8002070 <HAL_GPIO_Init+0x300>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	4a5c      	ldr	r2, [pc, #368]	@ (8002070 <HAL_GPIO_Init+0x300>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f06:	4b5a      	ldr	r3, [pc, #360]	@ (8002070 <HAL_GPIO_Init+0x300>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f12:	4a58      	ldr	r2, [pc, #352]	@ (8002074 <HAL_GPIO_Init+0x304>)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_GPIO_Init+0x308>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d025      	beq.n	8001f8a <HAL_GPIO_Init+0x21a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	@ (800207c <HAL_GPIO_Init+0x30c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <HAL_GPIO_Init+0x216>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	@ (8002080 <HAL_GPIO_Init+0x310>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d019      	beq.n	8001f82 <HAL_GPIO_Init+0x212>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	@ (8002084 <HAL_GPIO_Init+0x314>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0x20e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	@ (8002088 <HAL_GPIO_Init+0x318>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00d      	beq.n	8001f7a <HAL_GPIO_Init+0x20a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4a      	ldr	r2, [pc, #296]	@ (800208c <HAL_GPIO_Init+0x31c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <HAL_GPIO_Init+0x206>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a49      	ldr	r2, [pc, #292]	@ (8002090 <HAL_GPIO_Init+0x320>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_GPIO_Init+0x202>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e00c      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e00a      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e008      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e004      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	4093      	lsls	r3, r2
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9c:	4935      	ldr	r1, [pc, #212]	@ (8002074 <HAL_GPIO_Init+0x304>)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001faa:	4b3a      	ldr	r3, [pc, #232]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fce:	4a31      	ldr	r2, [pc, #196]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff8:	4a26      	ldr	r2, [pc, #152]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002022:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002028:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <HAL_GPIO_Init+0x324>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204c:	4a11      	ldr	r2, [pc, #68]	@ (8002094 <HAL_GPIO_Init+0x324>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	f67f ae96 	bls.w	8001d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40013800 	.word	0x40013800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021000 	.word	0x40021000
 800208c:	40021400 	.word	0x40021400
 8002090:	40021800 	.word	0x40021800
 8002094:	40013c00 	.word	0x40013c00

08002098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
 80020a4:	4613      	mov	r3, r2
 80020a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a8:	787b      	ldrb	r3, [r7, #1]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b4:	e003      	b.n	80020be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	041a      	lsls	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e12b      	b.n	8002336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fb98 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2224      	movs	r2, #36	@ 0x24
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800211e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800212e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002130:	f001 f932 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8002134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a81      	ldr	r2, [pc, #516]	@ (8002340 <HAL_I2C_Init+0x274>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d807      	bhi.n	8002150 <HAL_I2C_Init+0x84>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a80      	ldr	r2, [pc, #512]	@ (8002344 <HAL_I2C_Init+0x278>)
 8002144:	4293      	cmp	r3, r2
 8002146:	bf94      	ite	ls
 8002148:	2301      	movls	r3, #1
 800214a:	2300      	movhi	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e006      	b.n	800215e <HAL_I2C_Init+0x92>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a7d      	ldr	r2, [pc, #500]	@ (8002348 <HAL_I2C_Init+0x27c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	bf94      	ite	ls
 8002158:	2301      	movls	r3, #1
 800215a:	2300      	movhi	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0e7      	b.n	8002336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a78      	ldr	r2, [pc, #480]	@ (800234c <HAL_I2C_Init+0x280>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a6a      	ldr	r2, [pc, #424]	@ (8002340 <HAL_I2C_Init+0x274>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d802      	bhi.n	80021a0 <HAL_I2C_Init+0xd4>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3301      	adds	r3, #1
 800219e:	e009      	b.n	80021b4 <HAL_I2C_Init+0xe8>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	4a69      	ldr	r2, [pc, #420]	@ (8002350 <HAL_I2C_Init+0x284>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	3301      	adds	r3, #1
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	495c      	ldr	r1, [pc, #368]	@ (8002340 <HAL_I2C_Init+0x274>)
 80021d0:	428b      	cmp	r3, r1
 80021d2:	d819      	bhi.n	8002208 <HAL_I2C_Init+0x13c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e59      	subs	r1, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021e8:	400b      	ands	r3, r1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_I2C_Init+0x138>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e59      	subs	r1, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002202:	e051      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002204:	2304      	movs	r3, #4
 8002206:	e04f      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <HAL_I2C_Init+0x168>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e012      	b.n	800225a <HAL_I2C_Init+0x18e>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e58      	subs	r0, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	0099      	lsls	r1, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	fbb0 f3f3 	udiv	r3, r0, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Init+0x196>
 800225e:	2301      	movs	r3, #1
 8002260:	e022      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <HAL_I2C_Init+0x1bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e58      	subs	r0, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	440b      	add	r3, r1
 8002278:	fbb0 f3f3 	udiv	r3, r0, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002286:	e00f      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	0099      	lsls	r1, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6809      	ldr	r1, [r1, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6911      	ldr	r1, [r2, #16]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68d2      	ldr	r2, [r2, #12]
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	000186a0 	.word	0x000186a0
 8002344:	001e847f 	.word	0x001e847f
 8002348:	003d08ff 	.word	0x003d08ff
 800234c:	431bde83 	.word	0x431bde83
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4603      	mov	r3, r0
 8002364:	817b      	strh	r3, [r7, #10]
 8002366:	460b      	mov	r3, r1
 8002368:	813b      	strh	r3, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800236e:	f7ff fbbd 	bl	8001aec <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b20      	cmp	r3, #32
 800237e:	f040 80d9 	bne.w	8002534 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2319      	movs	r3, #25
 8002388:	2201      	movs	r2, #1
 800238a:	496d      	ldr	r1, [pc, #436]	@ (8002540 <HAL_I2C_Mem_Write+0x1ec>)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fc8b 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
 800239a:	e0cc      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_I2C_Mem_Write+0x56>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e0c5      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d007      	beq.n	80023d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2221      	movs	r2, #33	@ 0x21
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2240      	movs	r2, #64	@ 0x40
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002400:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a4d      	ldr	r2, [pc, #308]	@ (8002544 <HAL_I2C_Mem_Write+0x1f0>)
 8002410:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002412:	88f8      	ldrh	r0, [r7, #6]
 8002414:	893a      	ldrh	r2, [r7, #8]
 8002416:	8979      	ldrh	r1, [r7, #10]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4603      	mov	r3, r0
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fac2 	bl	80029ac <I2C_RequestMemoryWrite>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d052      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e081      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fd50 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	2b04      	cmp	r3, #4
 8002448:	d107      	bne.n	800245a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002458:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06b      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b04      	cmp	r3, #4
 800249a:	d11b      	bne.n	80024d4 <HAL_I2C_Mem_Write+0x180>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d017      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1aa      	bne.n	8002432 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fd43 	bl	8002f6c <I2C_WaitOnBTFFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00d      	beq.n	8002508 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d107      	bne.n	8002504 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002502:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e016      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	00100002 	.word	0x00100002
 8002544:	ffff0000 	.word	0xffff0000

08002548 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	@ 0x30
 800254c:	af02      	add	r7, sp, #8
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	4608      	mov	r0, r1
 8002552:	4611      	mov	r1, r2
 8002554:	461a      	mov	r2, r3
 8002556:	4603      	mov	r3, r0
 8002558:	817b      	strh	r3, [r7, #10]
 800255a:	460b      	mov	r3, r1
 800255c:	813b      	strh	r3, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002562:	f7ff fac3 	bl	8001aec <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b20      	cmp	r3, #32
 8002572:	f040 8214 	bne.w	800299e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2319      	movs	r3, #25
 800257c:	2201      	movs	r2, #1
 800257e:	497b      	ldr	r1, [pc, #492]	@ (800276c <HAL_I2C_Mem_Read+0x224>)
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fb91 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
 800258e:	e207      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_I2C_Mem_Read+0x56>
 800259a:	2302      	movs	r3, #2
 800259c:	e200      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d007      	beq.n	80025c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2222      	movs	r2, #34	@ 0x22
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2240      	movs	r2, #64	@ 0x40
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80025f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a5b      	ldr	r2, [pc, #364]	@ (8002770 <HAL_I2C_Mem_Read+0x228>)
 8002604:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002606:	88f8      	ldrh	r0, [r7, #6]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	8979      	ldrh	r1, [r7, #10]
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4603      	mov	r3, r0
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa5e 	bl	8002ad8 <I2C_RequestMemoryRead>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1bc      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d113      	bne.n	8002656 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	623b      	str	r3, [r7, #32]
 8002642:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e190      	b.n	8002978 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	2b01      	cmp	r3, #1
 800265c:	d11b      	bne.n	8002696 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800266c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e170      	b.n	8002978 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	2b02      	cmp	r3, #2
 800269c:	d11b      	bne.n	80026d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	e150      	b.n	8002978 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026ec:	e144      	b.n	8002978 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	f200 80f1 	bhi.w	80028da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d123      	bne.n	8002748 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002702:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fc79 	bl	8002ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e145      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002746:	e117      	b.n	8002978 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	2b02      	cmp	r3, #2
 800274e:	d14e      	bne.n	80027ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002756:	2200      	movs	r2, #0
 8002758:	4906      	ldr	r1, [pc, #24]	@ (8002774 <HAL_I2C_Mem_Read+0x22c>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 faa4 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e11a      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
 800276a:	bf00      	nop
 800276c:	00100002 	.word	0x00100002
 8002770:	ffff0000 	.word	0xffff0000
 8002774:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027ec:	e0c4      	b.n	8002978 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f4:	2200      	movs	r2, #0
 80027f6:	496c      	ldr	r1, [pc, #432]	@ (80029a8 <HAL_I2C_Mem_Read+0x460>)
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fa55 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0cb      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	2200      	movs	r2, #0
 8002852:	4955      	ldr	r1, [pc, #340]	@ (80029a8 <HAL_I2C_Mem_Read+0x460>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fa27 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e09d      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028d8:	e04e      	b.n	8002978 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fb8c 	bl	8002ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e058      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b04      	cmp	r3, #4
 800292c:	d124      	bne.n	8002978 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002932:	2b03      	cmp	r3, #3
 8002934:	d107      	bne.n	8002946 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002944:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f aeb6 	bne.w	80026ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3728      	adds	r7, #40	@ 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	00010004 	.word	0x00010004

080029ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	460b      	mov	r3, r1
 80029c0:	813b      	strh	r3, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	2200      	movs	r2, #0
 80029de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f960 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029fc:	d103      	bne.n	8002a06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e05f      	b.n	8002aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	492d      	ldr	r1, [pc, #180]	@ (8002ad4 <I2C_RequestMemoryWrite+0x128>)
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f9bb 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e04c      	b.n	8002aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fa46 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e02b      	b.n	8002aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a78:	893b      	ldrh	r3, [r7, #8]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	611a      	str	r2, [r3, #16]
 8002a82:	e021      	b.n	8002ac8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a84:	893b      	ldrh	r3, [r7, #8]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a94:	6a39      	ldr	r1, [r7, #32]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fa20 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d107      	bne.n	8002aba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e005      	b.n	8002aca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002abe:	893b      	ldrh	r3, [r7, #8]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	00010002 	.word	0x00010002

08002ad8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f8c2 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b38:	d103      	bne.n	8002b42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0aa      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	4952      	ldr	r1, [pc, #328]	@ (8002ca4 <I2C_RequestMemoryRead+0x1cc>)
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f91d 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e097      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f9a8 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e076      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	e021      	b.n	8002c04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc0:	893b      	ldrh	r3, [r7, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f982 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e050      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c06:	6a39      	ldr	r1, [r7, #32]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f967 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d107      	bne.n	8002c2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e035      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f82b 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c66:	d103      	bne.n	8002c70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e013      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c74:	897b      	ldrh	r3, [r7, #10]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	4906      	ldr	r1, [pc, #24]	@ (8002ca4 <I2C_RequestMemoryRead+0x1cc>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f886 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	00010002 	.word	0x00010002

08002ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb8:	e048      	b.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d044      	beq.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7fe ff13 	bl	8001aec <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d139      	bne.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10d      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	e00c      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d116      	bne.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e023      	b.n	8002d94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10d      	bne.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	e00c      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d093      	beq.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002daa:	e071      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dba:	d123      	bne.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e067      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0a:	d041      	beq.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0c:	f7fe fe6e 	bl	8001aec <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d302      	bcc.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d136      	bne.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10c      	bne.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	e00b      	b.n	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e021      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10c      	bne.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e00b      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f af6d 	bne.w	8002dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee8:	e034      	b.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f8e3 	bl	80030b6 <I2C_IsAcknowledgeFailed>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e034      	b.n	8002f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d028      	beq.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7fe fdf3 	bl	8001aec <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11d      	bne.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f22:	2b80      	cmp	r3, #128	@ 0x80
 8002f24:	d016      	beq.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e007      	b.n	8002f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5e:	2b80      	cmp	r3, #128	@ 0x80
 8002f60:	d1c3      	bne.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f78:	e034      	b.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f89b 	bl	80030b6 <I2C_IsAcknowledgeFailed>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e034      	b.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d028      	beq.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f92:	f7fe fdab 	bl	8001aec <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11d      	bne.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d016      	beq.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e007      	b.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d1c3      	bne.n	8002f7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003008:	e049      	b.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b10      	cmp	r3, #16
 8003016:	d119      	bne.n	800304c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0210 	mvn.w	r2, #16
 8003020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e030      	b.n	80030ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fe fd4e 	bl	8001aec <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11d      	bne.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d016      	beq.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	f043 0220 	orr.w	r2, r3, #32
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e007      	b.n	80030ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d1ae      	bne.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030cc:	d11b      	bne.n	8003106 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f043 0204 	orr.w	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4b20      	ldr	r3, [pc, #128]	@ (80031a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	4a1f      	ldr	r2, [pc, #124]	@ (80031a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	@ 0x40
 800312e:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800313a:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003140:	f7fe fcd4 	bl	8001aec <HAL_GetTick>
 8003144:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003146:	e009      	b.n	800315c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003148:	f7fe fcd0 	bl	8001aec <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003156:	d901      	bls.n	800315c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e01f      	b.n	800319c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800315c:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <HAL_PWREx_EnableOverDrive+0x98>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003168:	d1ee      	bne.n	8003148 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003170:	f7fe fcbc 	bl	8001aec <HAL_GetTick>
 8003174:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003176:	e009      	b.n	800318c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003178:	f7fe fcb8 	bl	8001aec <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003186:	d901      	bls.n	800318c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e007      	b.n	800319c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800318c:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <HAL_PWREx_EnableOverDrive+0x98>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003198:	d1ee      	bne.n	8003178 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	420e0040 	.word	0x420e0040
 80031ac:	40007000 	.word	0x40007000
 80031b0:	420e0044 	.word	0x420e0044

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0cc      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b68      	ldr	r3, [pc, #416]	@ (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d90c      	bls.n	80031f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b65      	ldr	r3, [pc, #404]	@ (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b63      	ldr	r3, [pc, #396]	@ (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0b8      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003208:	4b59      	ldr	r3, [pc, #356]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a58      	ldr	r2, [pc, #352]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003220:	4b53      	ldr	r3, [pc, #332]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a52      	ldr	r2, [pc, #328]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800322a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b50      	ldr	r3, [pc, #320]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	494d      	ldr	r1, [pc, #308]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d044      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b47      	ldr	r3, [pc, #284]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d119      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e07f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d003      	beq.n	8003272 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	2b03      	cmp	r3, #3
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	4b3f      	ldr	r3, [pc, #252]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	4b3b      	ldr	r3, [pc, #236]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e067      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b37      	ldr	r3, [pc, #220]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4934      	ldr	r1, [pc, #208]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fe fc22 	bl	8001aec <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe fc1e 	bl	8001aec <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e04f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b25      	ldr	r3, [pc, #148]	@ (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d20c      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b22      	ldr	r3, [pc, #136]	@ (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b20      	ldr	r3, [pc, #128]	@ (800336c <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e032      	b.n	8003362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4916      	ldr	r1, [pc, #88]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003326:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	490e      	ldr	r1, [pc, #56]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800333a:	f000 f855 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 800333e:	4602      	mov	r2, r0
 8003340:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	490a      	ldr	r1, [pc, #40]	@ (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	5ccb      	ldrb	r3, [r1, r3]
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a09      	ldr	r2, [pc, #36]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe fb82 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023c00 	.word	0x40023c00
 8003370:	40023800 	.word	0x40023800
 8003374:	080046c4 	.word	0x080046c4
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800339c:	f7ff fff0 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0a9b      	lsrs	r3, r3, #10
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	080046d4 	.word	0x080046d4

080033c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c4:	f7ff ffdc 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0b5b      	lsrs	r3, r3, #13
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	@ (80033e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	080046d4 	.word	0x080046d4

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b0ae      	sub	sp, #184	@ 0xb8
 80033ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340e:	4bcb      	ldr	r3, [pc, #812]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b0c      	cmp	r3, #12
 8003418:	f200 8206 	bhi.w	8003828 <HAL_RCC_GetSysClockFreq+0x440>
 800341c:	a201      	add	r2, pc, #4	@ (adr r2, 8003424 <HAL_RCC_GetSysClockFreq+0x3c>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003459 	.word	0x08003459
 8003428:	08003829 	.word	0x08003829
 800342c:	08003829 	.word	0x08003829
 8003430:	08003829 	.word	0x08003829
 8003434:	08003461 	.word	0x08003461
 8003438:	08003829 	.word	0x08003829
 800343c:	08003829 	.word	0x08003829
 8003440:	08003829 	.word	0x08003829
 8003444:	08003469 	.word	0x08003469
 8003448:	08003829 	.word	0x08003829
 800344c:	08003829 	.word	0x08003829
 8003450:	08003829 	.word	0x08003829
 8003454:	08003659 	.word	0x08003659
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4bb9      	ldr	r3, [pc, #740]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x358>)
 800345a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800345e:	e1e7      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003460:	4bb8      	ldr	r3, [pc, #736]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003466:	e1e3      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4bb4      	ldr	r3, [pc, #720]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003474:	4bb1      	ldr	r3, [pc, #708]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d071      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003480:	4bae      	ldr	r3, [pc, #696]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800348c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003498:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b8:	0150      	lsls	r0, r2, #5
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4621      	mov	r1, r4
 80034c0:	1a51      	subs	r1, r2, r1
 80034c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80034c4:	4629      	mov	r1, r5
 80034c6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80034d8:	4649      	mov	r1, r9
 80034da:	018b      	lsls	r3, r1, #6
 80034dc:	4641      	mov	r1, r8
 80034de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e2:	4641      	mov	r1, r8
 80034e4:	018a      	lsls	r2, r1, #6
 80034e6:	4641      	mov	r1, r8
 80034e8:	1a51      	subs	r1, r2, r1
 80034ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034ec:	4649      	mov	r1, r9
 80034ee:	eb63 0301 	sbc.w	r3, r3, r1
 80034f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003500:	4649      	mov	r1, r9
 8003502:	00cb      	lsls	r3, r1, #3
 8003504:	4641      	mov	r1, r8
 8003506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350a:	4641      	mov	r1, r8
 800350c:	00ca      	lsls	r2, r1, #3
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	4603      	mov	r3, r0
 8003514:	4622      	mov	r2, r4
 8003516:	189b      	adds	r3, r3, r2
 8003518:	633b      	str	r3, [r7, #48]	@ 0x30
 800351a:	462b      	mov	r3, r5
 800351c:	460a      	mov	r2, r1
 800351e:	eb42 0303 	adc.w	r3, r2, r3
 8003522:	637b      	str	r3, [r7, #52]	@ 0x34
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003530:	4629      	mov	r1, r5
 8003532:	024b      	lsls	r3, r1, #9
 8003534:	4621      	mov	r1, r4
 8003536:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800353a:	4621      	mov	r1, r4
 800353c:	024a      	lsls	r2, r1, #9
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800354c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003550:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003554:	f7fd f98e 	bl	8000874 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4613      	mov	r3, r2
 800355e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003562:	e067      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003564:	4b75      	ldr	r3, [pc, #468]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003570:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003574:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800357e:	2300      	movs	r3, #0
 8003580:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003582:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003586:	4622      	mov	r2, r4
 8003588:	462b      	mov	r3, r5
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	0159      	lsls	r1, r3, #5
 8003594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003598:	0150      	lsls	r0, r2, #5
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4621      	mov	r1, r4
 80035a0:	1a51      	subs	r1, r2, r1
 80035a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035a4:	4629      	mov	r1, r5
 80035a6:	eb63 0301 	sbc.w	r3, r3, r1
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80035b8:	4649      	mov	r1, r9
 80035ba:	018b      	lsls	r3, r1, #6
 80035bc:	4641      	mov	r1, r8
 80035be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c2:	4641      	mov	r1, r8
 80035c4:	018a      	lsls	r2, r1, #6
 80035c6:	4641      	mov	r1, r8
 80035c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80035cc:	4649      	mov	r1, r9
 80035ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e6:	4692      	mov	sl, r2
 80035e8:	469b      	mov	fp, r3
 80035ea:	4623      	mov	r3, r4
 80035ec:	eb1a 0303 	adds.w	r3, sl, r3
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	462b      	mov	r3, r5
 80035f4:	eb4b 0303 	adc.w	r3, fp, r3
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003606:	4629      	mov	r1, r5
 8003608:	028b      	lsls	r3, r1, #10
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003610:	4621      	mov	r1, r4
 8003612:	028a      	lsls	r2, r1, #10
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800361c:	2200      	movs	r2, #0
 800361e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003620:	677a      	str	r2, [r7, #116]	@ 0x74
 8003622:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003626:	f7fd f925 	bl	8000874 <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4613      	mov	r3, r2
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003634:	4b41      	ldr	r3, [pc, #260]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800364a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003656:	e0eb      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003658:	4b38      	ldr	r3, [pc, #224]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003664:	4b35      	ldr	r3, [pc, #212]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06b      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003670:	4b32      	ldr	r3, [pc, #200]	@ (800373c <HAL_RCC_GetSysClockFreq+0x354>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	2200      	movs	r2, #0
 8003678:	66bb      	str	r3, [r7, #104]	@ 0x68
 800367a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800367c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003682:	663b      	str	r3, [r7, #96]	@ 0x60
 8003684:	2300      	movs	r3, #0
 8003686:	667b      	str	r3, [r7, #100]	@ 0x64
 8003688:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800368c:	4622      	mov	r2, r4
 800368e:	462b      	mov	r3, r5
 8003690:	f04f 0000 	mov.w	r0, #0
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	0159      	lsls	r1, r3, #5
 800369a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369e:	0150      	lsls	r0, r2, #5
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4621      	mov	r1, r4
 80036a6:	1a51      	subs	r1, r2, r1
 80036a8:	61b9      	str	r1, [r7, #24]
 80036aa:	4629      	mov	r1, r5
 80036ac:	eb63 0301 	sbc.w	r3, r3, r1
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036be:	4659      	mov	r1, fp
 80036c0:	018b      	lsls	r3, r1, #6
 80036c2:	4651      	mov	r1, sl
 80036c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c8:	4651      	mov	r1, sl
 80036ca:	018a      	lsls	r2, r1, #6
 80036cc:	4651      	mov	r1, sl
 80036ce:	ebb2 0801 	subs.w	r8, r2, r1
 80036d2:	4659      	mov	r1, fp
 80036d4:	eb63 0901 	sbc.w	r9, r3, r1
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ec:	4690      	mov	r8, r2
 80036ee:	4699      	mov	r9, r3
 80036f0:	4623      	mov	r3, r4
 80036f2:	eb18 0303 	adds.w	r3, r8, r3
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	462b      	mov	r3, r5
 80036fa:	eb49 0303 	adc.w	r3, r9, r3
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800370c:	4629      	mov	r1, r5
 800370e:	024b      	lsls	r3, r1, #9
 8003710:	4621      	mov	r1, r4
 8003712:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003716:	4621      	mov	r1, r4
 8003718:	024a      	lsls	r2, r1, #9
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003722:	2200      	movs	r2, #0
 8003724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003726:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003728:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800372c:	f7fd f8a2 	bl	8000874 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800373a:	e065      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x420>
 800373c:	40023800 	.word	0x40023800
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003748:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x458>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	2200      	movs	r2, #0
 8003750:	4618      	mov	r0, r3
 8003752:	4611      	mov	r1, r2
 8003754:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003758:	653b      	str	r3, [r7, #80]	@ 0x50
 800375a:	2300      	movs	r3, #0
 800375c:	657b      	str	r3, [r7, #84]	@ 0x54
 800375e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003762:	4642      	mov	r2, r8
 8003764:	464b      	mov	r3, r9
 8003766:	f04f 0000 	mov.w	r0, #0
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	0159      	lsls	r1, r3, #5
 8003770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003774:	0150      	lsls	r0, r2, #5
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4641      	mov	r1, r8
 800377c:	1a51      	subs	r1, r2, r1
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	4649      	mov	r1, r9
 8003782:	eb63 0301 	sbc.w	r3, r3, r1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003794:	4659      	mov	r1, fp
 8003796:	018b      	lsls	r3, r1, #6
 8003798:	4651      	mov	r1, sl
 800379a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800379e:	4651      	mov	r1, sl
 80037a0:	018a      	lsls	r2, r1, #6
 80037a2:	4651      	mov	r1, sl
 80037a4:	1a54      	subs	r4, r2, r1
 80037a6:	4659      	mov	r1, fp
 80037a8:	eb63 0501 	sbc.w	r5, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	00eb      	lsls	r3, r5, #3
 80037b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ba:	00e2      	lsls	r2, r4, #3
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	18e3      	adds	r3, r4, r3
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	464b      	mov	r3, r9
 80037c8:	eb45 0303 	adc.w	r3, r5, r3
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037da:	4629      	mov	r1, r5
 80037dc:	028b      	lsls	r3, r1, #10
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e4:	4621      	mov	r1, r4
 80037e6:	028a      	lsls	r2, r1, #10
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037f0:	2200      	movs	r2, #0
 80037f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80037f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037fa:	f7fd f83b 	bl	8000874 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4613      	mov	r3, r2
 8003804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003808:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x458>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0f1b      	lsrs	r3, r3, #28
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800381a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003826:	e003      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b06      	ldr	r3, [pc, #24]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x45c>)
 800382a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800382e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003834:	4618      	mov	r0, r3
 8003836:	37b8      	adds	r7, #184	@ 0xb8
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400

08003848 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e28d      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8083 	beq.w	800396e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003868:	4b94      	ldr	r3, [pc, #592]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b04      	cmp	r3, #4
 8003872:	d019      	beq.n	80038a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003874:	4b91      	ldr	r3, [pc, #580]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
        || \
 800387c:	2b08      	cmp	r3, #8
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003880:	4b8e      	ldr	r3, [pc, #568]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800388c:	d00c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388e:	4b8b      	ldr	r3, [pc, #556]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d112      	bne.n	80038c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b88      	ldr	r3, [pc, #544]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038a6:	d10b      	bne.n	80038c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	4b84      	ldr	r3, [pc, #528]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05b      	beq.n	800396c <HAL_RCC_OscConfig+0x124>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d157      	bne.n	800396c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e25a      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_OscConfig+0x90>
 80038ca:	4b7c      	ldr	r3, [pc, #496]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7b      	ldr	r2, [pc, #492]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xcc>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0xb4>
 80038e2:	4b76      	ldr	r3, [pc, #472]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a75      	ldr	r2, [pc, #468]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b73      	ldr	r3, [pc, #460]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a72      	ldr	r2, [pc, #456]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xcc>
 80038fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6e      	ldr	r2, [pc, #440]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b6c      	ldr	r3, [pc, #432]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a6b      	ldr	r2, [pc, #428]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe f8e6 	bl	8001aec <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fe f8e2 	bl	8001aec <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	@ 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e21f      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b61      	ldr	r3, [pc, #388]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xdc>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe f8d2 	bl	8001aec <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe f8ce 	bl	8001aec <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	@ 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e20b      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b57      	ldr	r3, [pc, #348]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x104>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d06f      	beq.n	8003a5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800397a:	4b50      	ldr	r3, [pc, #320]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003986:	4b4d      	ldr	r3, [pc, #308]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
        || \
 800398e:	2b08      	cmp	r3, #8
 8003990:	d105      	bne.n	800399e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003992:	4b4a      	ldr	r3, [pc, #296]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800399e:	4b47      	ldr	r3, [pc, #284]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d11c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b44      	ldr	r3, [pc, #272]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d116      	bne.n	80039e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b6:	4b41      	ldr	r3, [pc, #260]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_RCC_OscConfig+0x186>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d001      	beq.n	80039ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e1d3      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ce:	4b3b      	ldr	r3, [pc, #236]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4937      	ldr	r1, [pc, #220]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e2:	e03a      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d020      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ec:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <HAL_RCC_OscConfig+0x278>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fe f87b 	bl	8001aec <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fa:	f7fe f877 	bl	8001aec <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1b4      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a18:	4b28      	ldr	r3, [pc, #160]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4925      	ldr	r1, [pc, #148]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]
 8003a2c:	e015      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2e:	4b24      	ldr	r3, [pc, #144]	@ (8003ac0 <HAL_RCC_OscConfig+0x278>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe f85a 	bl	8001aec <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3c:	f7fe f856 	bl	8001aec <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e193      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d036      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fe f83a 	bl	8001aec <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7c:	f7fe f836 	bl	8001aec <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e173      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x234>
 8003a9a:	e01b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fe f823 	bl	8001aec <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa8:	e00e      	b.n	8003ac8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aaa:	f7fe f81f 	bl	8001aec <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d907      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e15c      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470000 	.word	0x42470000
 8003ac4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac8:	4b8a      	ldr	r3, [pc, #552]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ea      	bne.n	8003aaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8097 	beq.w	8003c10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae6:	4b83      	ldr	r3, [pc, #524]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	4a7e      	ldr	r2, [pc, #504]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b02:	4b7c      	ldr	r3, [pc, #496]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b79      	ldr	r3, [pc, #484]	@ (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d118      	bne.n	8003b50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1e:	4b76      	ldr	r3, [pc, #472]	@ (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a75      	ldr	r2, [pc, #468]	@ (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2a:	f7fd ffdf 	bl	8001aec <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fd ffdb 	bl	8001aec <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e118      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x31e>
 8003b58:	4b66      	ldr	r3, [pc, #408]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4a65      	ldr	r2, [pc, #404]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x358>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x340>
 8003b6e:	4b61      	ldr	r3, [pc, #388]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	4a60      	ldr	r2, [pc, #384]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x358>
 8003b88:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	4a59      	ldr	r2, [pc, #356]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b94:	4b57      	ldr	r3, [pc, #348]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	4a56      	ldr	r2, [pc, #344]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	f023 0304 	bic.w	r3, r3, #4
 8003b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fd ffa0 	bl	8001aec <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fd ff9c 	bl	8001aec <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e0d7      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ee      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x368>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd ff8a 	bl	8001aec <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fd ff86 	bl	8001aec <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e0c1      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	4b40      	ldr	r3, [pc, #256]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ee      	bne.n	8003bdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80ad 	beq.w	8003d74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c1a:	4b36      	ldr	r3, [pc, #216]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d060      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d145      	bne.n	8003cba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b33      	ldr	r3, [pc, #204]	@ (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd ff5a 	bl	8001aec <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fd ff56 	bl	8001aec <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e093      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	4b29      	ldr	r3, [pc, #164]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	019b      	lsls	r3, r3, #6
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	3b01      	subs	r3, #1
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	491b      	ldr	r1, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd ff2b 	bl	8001aec <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fd ff27 	bl	8001aec <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e064      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cac:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x452>
 8003cb8:	e05c      	b.n	8003d74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd ff14 	bl	8001aec <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd ff10 	bl	8001aec <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e04d      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x480>
 8003ce6:	e045      	b.n	8003d74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e040      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d00:	4b1f      	ldr	r3, [pc, #124]	@ (8003d80 <HAL_RCC_OscConfig+0x538>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d030      	beq.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d129      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d122      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d30:	4013      	ands	r3, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d119      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d10f      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e042      	b.n	8003e1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fd84 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	@ 0x24
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f82b 	bl	8003e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e28:	b0c0      	sub	sp, #256	@ 0x100
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	68d9      	ldr	r1, [r3, #12]
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	ea40 0301 	orr.w	r3, r0, r1
 8003e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e7c:	f021 010c 	bic.w	r1, r1, #12
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9e:	6999      	ldr	r1, [r3, #24]
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	ea40 0301 	orr.w	r3, r0, r1
 8003eaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80040f0 <UART_SetConfig+0x2cc>)
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d005      	beq.n	8003ec4 <UART_SetConfig+0xa0>
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80040f4 <UART_SetConfig+0x2d0>)
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d104      	bne.n	8003ece <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7ff fa7c 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ecc:	e003      	b.n	8003ed6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ece:	f7ff fa63 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8003ed2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee0:	f040 810c 	bne.w	80040fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ef2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	462b      	mov	r3, r5
 8003efa:	1891      	adds	r1, r2, r2
 8003efc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003efe:	415b      	adcs	r3, r3
 8003f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f06:	4621      	mov	r1, r4
 8003f08:	eb12 0801 	adds.w	r8, r2, r1
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	eb43 0901 	adc.w	r9, r3, r1
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f26:	4690      	mov	r8, r2
 8003f28:	4699      	mov	r9, r3
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	eb18 0303 	adds.w	r3, r8, r3
 8003f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f34:	462b      	mov	r3, r5
 8003f36:	eb49 0303 	adc.w	r3, r9, r3
 8003f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f52:	460b      	mov	r3, r1
 8003f54:	18db      	adds	r3, r3, r3
 8003f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f58:	4613      	mov	r3, r2
 8003f5a:	eb42 0303 	adc.w	r3, r2, r3
 8003f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f68:	f7fc fc84 	bl	8000874 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4b61      	ldr	r3, [pc, #388]	@ (80040f8 <UART_SetConfig+0x2d4>)
 8003f72:	fba3 2302 	umull	r2, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	011c      	lsls	r4, r3, #4
 8003f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f94:	415b      	adcs	r3, r3
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fbc:	4692      	mov	sl, r2
 8003fbe:	469b      	mov	fp, r3
 8003fc0:	4643      	mov	r3, r8
 8003fc2:	eb1a 0303 	adds.w	r3, sl, r3
 8003fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	eb4b 0303 	adc.w	r3, fp, r3
 8003fd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fe0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fe4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	18db      	adds	r3, r3, r3
 8003fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fee:	4613      	mov	r3, r2
 8003ff0:	eb42 0303 	adc.w	r3, r2, r3
 8003ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ffa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ffe:	f7fc fc39 	bl	8000874 <__aeabi_uldivmod>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4611      	mov	r1, r2
 8004008:	4b3b      	ldr	r3, [pc, #236]	@ (80040f8 <UART_SetConfig+0x2d4>)
 800400a:	fba3 2301 	umull	r2, r3, r3, r1
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2264      	movs	r2, #100	@ 0x64
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	1acb      	subs	r3, r1, r3
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800401e:	4b36      	ldr	r3, [pc, #216]	@ (80040f8 <UART_SetConfig+0x2d4>)
 8004020:	fba3 2302 	umull	r2, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800402c:	441c      	add	r4, r3
 800402e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004032:	2200      	movs	r2, #0
 8004034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004038:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800403c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	1891      	adds	r1, r2, r2
 8004046:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004048:	415b      	adcs	r3, r3
 800404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004050:	4641      	mov	r1, r8
 8004052:	1851      	adds	r1, r2, r1
 8004054:	6339      	str	r1, [r7, #48]	@ 0x30
 8004056:	4649      	mov	r1, r9
 8004058:	414b      	adcs	r3, r1
 800405a:	637b      	str	r3, [r7, #52]	@ 0x34
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004068:	4659      	mov	r1, fp
 800406a:	00cb      	lsls	r3, r1, #3
 800406c:	4651      	mov	r1, sl
 800406e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004072:	4651      	mov	r1, sl
 8004074:	00ca      	lsls	r2, r1, #3
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	4603      	mov	r3, r0
 800407c:	4642      	mov	r2, r8
 800407e:	189b      	adds	r3, r3, r2
 8004080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004084:	464b      	mov	r3, r9
 8004086:	460a      	mov	r2, r1
 8004088:	eb42 0303 	adc.w	r3, r2, r3
 800408c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800409c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040a4:	460b      	mov	r3, r1
 80040a6:	18db      	adds	r3, r3, r3
 80040a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040aa:	4613      	mov	r3, r2
 80040ac:	eb42 0303 	adc.w	r3, r2, r3
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040ba:	f7fc fbdb 	bl	8000874 <__aeabi_uldivmod>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4b0d      	ldr	r3, [pc, #52]	@ (80040f8 <UART_SetConfig+0x2d4>)
 80040c4:	fba3 1302 	umull	r1, r3, r3, r2
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	2164      	movs	r1, #100	@ 0x64
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	3332      	adds	r3, #50	@ 0x32
 80040d6:	4a08      	ldr	r2, [pc, #32]	@ (80040f8 <UART_SetConfig+0x2d4>)
 80040d8:	fba2 2303 	umull	r2, r3, r2, r3
 80040dc:	095b      	lsrs	r3, r3, #5
 80040de:	f003 0207 	and.w	r2, r3, #7
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4422      	add	r2, r4
 80040ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040ec:	e106      	b.n	80042fc <UART_SetConfig+0x4d8>
 80040ee:	bf00      	nop
 80040f0:	40011000 	.word	0x40011000
 80040f4:	40011400 	.word	0x40011400
 80040f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004100:	2200      	movs	r2, #0
 8004102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004106:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800410a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800410e:	4642      	mov	r2, r8
 8004110:	464b      	mov	r3, r9
 8004112:	1891      	adds	r1, r2, r2
 8004114:	6239      	str	r1, [r7, #32]
 8004116:	415b      	adcs	r3, r3
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
 800411a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800411e:	4641      	mov	r1, r8
 8004120:	1854      	adds	r4, r2, r1
 8004122:	4649      	mov	r1, r9
 8004124:	eb43 0501 	adc.w	r5, r3, r1
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	00eb      	lsls	r3, r5, #3
 8004132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004136:	00e2      	lsls	r2, r4, #3
 8004138:	4614      	mov	r4, r2
 800413a:	461d      	mov	r5, r3
 800413c:	4643      	mov	r3, r8
 800413e:	18e3      	adds	r3, r4, r3
 8004140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004144:	464b      	mov	r3, r9
 8004146:	eb45 0303 	adc.w	r3, r5, r3
 800414a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800415a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800416a:	4629      	mov	r1, r5
 800416c:	008b      	lsls	r3, r1, #2
 800416e:	4621      	mov	r1, r4
 8004170:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004174:	4621      	mov	r1, r4
 8004176:	008a      	lsls	r2, r1, #2
 8004178:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800417c:	f7fc fb7a 	bl	8000874 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4b60      	ldr	r3, [pc, #384]	@ (8004308 <UART_SetConfig+0x4e4>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	011c      	lsls	r4, r3, #4
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004198:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800419c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	61b9      	str	r1, [r7, #24]
 80041a8:	415b      	adcs	r3, r3
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	6139      	str	r1, [r7, #16]
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004208:	4649      	mov	r1, r9
 800420a:	008b      	lsls	r3, r1, #2
 800420c:	4641      	mov	r1, r8
 800420e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004212:	4641      	mov	r1, r8
 8004214:	008a      	lsls	r2, r1, #2
 8004216:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800421a:	f7fc fb2b 	bl	8000874 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4611      	mov	r1, r2
 8004224:	4b38      	ldr	r3, [pc, #224]	@ (8004308 <UART_SetConfig+0x4e4>)
 8004226:	fba3 2301 	umull	r2, r3, r3, r1
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	2264      	movs	r2, #100	@ 0x64
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	1acb      	subs	r3, r1, r3
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	3332      	adds	r3, #50	@ 0x32
 8004238:	4a33      	ldr	r2, [pc, #204]	@ (8004308 <UART_SetConfig+0x4e4>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004244:	441c      	add	r4, r3
 8004246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800424a:	2200      	movs	r2, #0
 800424c:	673b      	str	r3, [r7, #112]	@ 0x70
 800424e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004250:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	1891      	adds	r1, r2, r2
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	415b      	adcs	r3, r3
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004264:	4641      	mov	r1, r8
 8004266:	1851      	adds	r1, r2, r1
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	4649      	mov	r1, r9
 800426c:	414b      	adcs	r3, r1
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800427c:	4659      	mov	r1, fp
 800427e:	00cb      	lsls	r3, r1, #3
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004286:	4651      	mov	r1, sl
 8004288:	00ca      	lsls	r2, r1, #3
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4603      	mov	r3, r0
 8004290:	4642      	mov	r2, r8
 8004292:	189b      	adds	r3, r3, r2
 8004294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004296:	464b      	mov	r3, r9
 8004298:	460a      	mov	r2, r1
 800429a:	eb42 0303 	adc.w	r3, r2, r3
 800429e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042b8:	4649      	mov	r1, r9
 80042ba:	008b      	lsls	r3, r1, #2
 80042bc:	4641      	mov	r1, r8
 80042be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042c2:	4641      	mov	r1, r8
 80042c4:	008a      	lsls	r2, r1, #2
 80042c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042ca:	f7fc fad3 	bl	8000874 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <UART_SetConfig+0x4e4>)
 80042d4:	fba3 1302 	umull	r1, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2164      	movs	r1, #100	@ 0x64
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	3332      	adds	r3, #50	@ 0x32
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <UART_SetConfig+0x4e4>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4422      	add	r2, r4
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004302:	46bd      	mov	sp, r7
 8004304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004308:	51eb851f 	.word	0x51eb851f

0800430c <memset>:
 800430c:	4402      	add	r2, r0
 800430e:	4603      	mov	r3, r0
 8004310:	4293      	cmp	r3, r2
 8004312:	d100      	bne.n	8004316 <memset+0xa>
 8004314:	4770      	bx	lr
 8004316:	f803 1b01 	strb.w	r1, [r3], #1
 800431a:	e7f9      	b.n	8004310 <memset+0x4>

0800431c <__errno>:
 800431c:	4b01      	ldr	r3, [pc, #4]	@ (8004324 <__errno+0x8>)
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	2000000c 	.word	0x2000000c

08004328 <__libc_init_array>:
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	4d0d      	ldr	r5, [pc, #52]	@ (8004360 <__libc_init_array+0x38>)
 800432c:	4c0d      	ldr	r4, [pc, #52]	@ (8004364 <__libc_init_array+0x3c>)
 800432e:	1b64      	subs	r4, r4, r5
 8004330:	10a4      	asrs	r4, r4, #2
 8004332:	2600      	movs	r6, #0
 8004334:	42a6      	cmp	r6, r4
 8004336:	d109      	bne.n	800434c <__libc_init_array+0x24>
 8004338:	4d0b      	ldr	r5, [pc, #44]	@ (8004368 <__libc_init_array+0x40>)
 800433a:	4c0c      	ldr	r4, [pc, #48]	@ (800436c <__libc_init_array+0x44>)
 800433c:	f000 f9b6 	bl	80046ac <_init>
 8004340:	1b64      	subs	r4, r4, r5
 8004342:	10a4      	asrs	r4, r4, #2
 8004344:	2600      	movs	r6, #0
 8004346:	42a6      	cmp	r6, r4
 8004348:	d105      	bne.n	8004356 <__libc_init_array+0x2e>
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004350:	4798      	blx	r3
 8004352:	3601      	adds	r6, #1
 8004354:	e7ee      	b.n	8004334 <__libc_init_array+0xc>
 8004356:	f855 3b04 	ldr.w	r3, [r5], #4
 800435a:	4798      	blx	r3
 800435c:	3601      	adds	r6, #1
 800435e:	e7f2      	b.n	8004346 <__libc_init_array+0x1e>
 8004360:	0800471c 	.word	0x0800471c
 8004364:	0800471c 	.word	0x0800471c
 8004368:	0800471c 	.word	0x0800471c
 800436c:	08004720 	.word	0x08004720

08004370 <atan2f>:
 8004370:	f000 b8fc 	b.w	800456c <__ieee754_atan2f>

08004374 <sqrtf>:
 8004374:	b508      	push	{r3, lr}
 8004376:	ed2d 8b02 	vpush	{d8}
 800437a:	eeb0 8a40 	vmov.f32	s16, s0
 800437e:	f000 f8f2 	bl	8004566 <__ieee754_sqrtf>
 8004382:	eeb4 8a48 	vcmp.f32	s16, s16
 8004386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438a:	d60c      	bvs.n	80043a6 <sqrtf+0x32>
 800438c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80043ac <sqrtf+0x38>
 8004390:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004398:	d505      	bpl.n	80043a6 <sqrtf+0x32>
 800439a:	f7ff ffbf 	bl	800431c <__errno>
 800439e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80043a2:	2321      	movs	r3, #33	@ 0x21
 80043a4:	6003      	str	r3, [r0, #0]
 80043a6:	ecbd 8b02 	vpop	{d8}
 80043aa:	bd08      	pop	{r3, pc}
 80043ac:	00000000 	.word	0x00000000

080043b0 <atanf>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	ee10 5a10 	vmov	r5, s0
 80043b6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80043ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80043be:	eef0 7a40 	vmov.f32	s15, s0
 80043c2:	d310      	bcc.n	80043e6 <atanf+0x36>
 80043c4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80043c8:	d904      	bls.n	80043d4 <atanf+0x24>
 80043ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 80043ce:	eeb0 0a67 	vmov.f32	s0, s15
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800450c <atanf+0x15c>
 80043d8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004510 <atanf+0x160>
 80043dc:	2d00      	cmp	r5, #0
 80043de:	bfc8      	it	gt
 80043e0:	eef0 7a47 	vmovgt.f32	s15, s14
 80043e4:	e7f3      	b.n	80043ce <atanf+0x1e>
 80043e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004514 <atanf+0x164>)
 80043e8:	429c      	cmp	r4, r3
 80043ea:	d810      	bhi.n	800440e <atanf+0x5e>
 80043ec:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80043f0:	d20a      	bcs.n	8004408 <atanf+0x58>
 80043f2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8004518 <atanf+0x168>
 80043f6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043fe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004406:	dce2      	bgt.n	80043ce <atanf+0x1e>
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	e013      	b.n	8004436 <atanf+0x86>
 800440e:	f000 f8a3 	bl	8004558 <fabsf>
 8004412:	4b42      	ldr	r3, [pc, #264]	@ (800451c <atanf+0x16c>)
 8004414:	429c      	cmp	r4, r3
 8004416:	d84f      	bhi.n	80044b8 <atanf+0x108>
 8004418:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800441c:	429c      	cmp	r4, r3
 800441e:	d841      	bhi.n	80044a4 <atanf+0xf4>
 8004420:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8004424:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004428:	eea0 7a27 	vfma.f32	s14, s0, s15
 800442c:	2300      	movs	r3, #0
 800442e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004432:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800443c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004520 <atanf+0x170>
 8004440:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8004524 <atanf+0x174>
 8004444:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8004528 <atanf+0x178>
 8004448:	ee66 6a06 	vmul.f32	s13, s12, s12
 800444c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8004450:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800452c <atanf+0x17c>
 8004454:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004458:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8004530 <atanf+0x180>
 800445c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004460:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004534 <atanf+0x184>
 8004464:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004468:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8004538 <atanf+0x188>
 800446c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004470:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800453c <atanf+0x18c>
 8004474:	eea6 5a87 	vfma.f32	s10, s13, s14
 8004478:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004540 <atanf+0x190>
 800447c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004480:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8004544 <atanf+0x194>
 8004484:	eea7 5a26 	vfma.f32	s10, s14, s13
 8004488:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004548 <atanf+0x198>
 800448c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004490:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004494:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004498:	ee27 7a87 	vmul.f32	s14, s15, s14
 800449c:	d121      	bne.n	80044e2 <atanf+0x132>
 800449e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044a2:	e794      	b.n	80043ce <atanf+0x1e>
 80044a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80044a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80044ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80044b0:	2301      	movs	r3, #1
 80044b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80044b6:	e7be      	b.n	8004436 <atanf+0x86>
 80044b8:	4b24      	ldr	r3, [pc, #144]	@ (800454c <atanf+0x19c>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	d80b      	bhi.n	80044d6 <atanf+0x126>
 80044be:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80044c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044c6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80044ca:	2302      	movs	r3, #2
 80044cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80044d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d4:	e7af      	b.n	8004436 <atanf+0x86>
 80044d6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80044da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80044de:	2303      	movs	r3, #3
 80044e0:	e7a9      	b.n	8004436 <atanf+0x86>
 80044e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004550 <atanf+0x1a0>)
 80044e4:	491b      	ldr	r1, [pc, #108]	@ (8004554 <atanf+0x1a4>)
 80044e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80044ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80044ee:	edd3 6a00 	vldr	s13, [r3]
 80044f2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044fc:	edd2 7a00 	vldr	s15, [r2]
 8004500:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004504:	bfb8      	it	lt
 8004506:	eef1 7a67 	vneglt.f32	s15, s15
 800450a:	e760      	b.n	80043ce <atanf+0x1e>
 800450c:	bfc90fdb 	.word	0xbfc90fdb
 8004510:	3fc90fdb 	.word	0x3fc90fdb
 8004514:	3edfffff 	.word	0x3edfffff
 8004518:	7149f2ca 	.word	0x7149f2ca
 800451c:	3f97ffff 	.word	0x3f97ffff
 8004520:	3c8569d7 	.word	0x3c8569d7
 8004524:	3d4bda59 	.word	0x3d4bda59
 8004528:	bd6ef16b 	.word	0xbd6ef16b
 800452c:	3d886b35 	.word	0x3d886b35
 8004530:	3dba2e6e 	.word	0x3dba2e6e
 8004534:	3e124925 	.word	0x3e124925
 8004538:	3eaaaaab 	.word	0x3eaaaaab
 800453c:	bd15a221 	.word	0xbd15a221
 8004540:	bd9d8795 	.word	0xbd9d8795
 8004544:	bde38e38 	.word	0xbde38e38
 8004548:	be4ccccd 	.word	0xbe4ccccd
 800454c:	401bffff 	.word	0x401bffff
 8004550:	080046ec 	.word	0x080046ec
 8004554:	080046dc 	.word	0x080046dc

08004558 <fabsf>:
 8004558:	ee10 3a10 	vmov	r3, s0
 800455c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004560:	ee00 3a10 	vmov	s0, r3
 8004564:	4770      	bx	lr

08004566 <__ieee754_sqrtf>:
 8004566:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800456a:	4770      	bx	lr

0800456c <__ieee754_atan2f>:
 800456c:	ee10 2a90 	vmov	r2, s1
 8004570:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8004574:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004578:	b510      	push	{r4, lr}
 800457a:	eef0 7a40 	vmov.f32	s15, s0
 800457e:	d806      	bhi.n	800458e <__ieee754_atan2f+0x22>
 8004580:	ee10 0a10 	vmov	r0, s0
 8004584:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004588:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800458c:	d904      	bls.n	8004598 <__ieee754_atan2f+0x2c>
 800458e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004592:	eeb0 0a67 	vmov.f32	s0, s15
 8004596:	bd10      	pop	{r4, pc}
 8004598:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800459c:	d103      	bne.n	80045a6 <__ieee754_atan2f+0x3a>
 800459e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a2:	f7ff bf05 	b.w	80043b0 <atanf>
 80045a6:	1794      	asrs	r4, r2, #30
 80045a8:	f004 0402 	and.w	r4, r4, #2
 80045ac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80045b0:	b943      	cbnz	r3, 80045c4 <__ieee754_atan2f+0x58>
 80045b2:	2c02      	cmp	r4, #2
 80045b4:	d05e      	beq.n	8004674 <__ieee754_atan2f+0x108>
 80045b6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004688 <__ieee754_atan2f+0x11c>
 80045ba:	2c03      	cmp	r4, #3
 80045bc:	bf08      	it	eq
 80045be:	eef0 7a47 	vmoveq.f32	s15, s14
 80045c2:	e7e6      	b.n	8004592 <__ieee754_atan2f+0x26>
 80045c4:	b941      	cbnz	r1, 80045d8 <__ieee754_atan2f+0x6c>
 80045c6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800468c <__ieee754_atan2f+0x120>
 80045ca:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004690 <__ieee754_atan2f+0x124>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	bfa8      	it	ge
 80045d2:	eef0 7a47 	vmovge.f32	s15, s14
 80045d6:	e7dc      	b.n	8004592 <__ieee754_atan2f+0x26>
 80045d8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80045dc:	d110      	bne.n	8004600 <__ieee754_atan2f+0x94>
 80045de:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80045e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80045e6:	d107      	bne.n	80045f8 <__ieee754_atan2f+0x8c>
 80045e8:	2c02      	cmp	r4, #2
 80045ea:	d846      	bhi.n	800467a <__ieee754_atan2f+0x10e>
 80045ec:	4b29      	ldr	r3, [pc, #164]	@ (8004694 <__ieee754_atan2f+0x128>)
 80045ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80045f2:	edd3 7a00 	vldr	s15, [r3]
 80045f6:	e7cc      	b.n	8004592 <__ieee754_atan2f+0x26>
 80045f8:	2c02      	cmp	r4, #2
 80045fa:	d841      	bhi.n	8004680 <__ieee754_atan2f+0x114>
 80045fc:	4b26      	ldr	r3, [pc, #152]	@ (8004698 <__ieee754_atan2f+0x12c>)
 80045fe:	e7f6      	b.n	80045ee <__ieee754_atan2f+0x82>
 8004600:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004604:	d0df      	beq.n	80045c6 <__ieee754_atan2f+0x5a>
 8004606:	1a5b      	subs	r3, r3, r1
 8004608:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800460c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8004610:	da1a      	bge.n	8004648 <__ieee754_atan2f+0xdc>
 8004612:	2a00      	cmp	r2, #0
 8004614:	da01      	bge.n	800461a <__ieee754_atan2f+0xae>
 8004616:	313c      	adds	r1, #60	@ 0x3c
 8004618:	db19      	blt.n	800464e <__ieee754_atan2f+0xe2>
 800461a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800461e:	f7ff ff9b 	bl	8004558 <fabsf>
 8004622:	f7ff fec5 	bl	80043b0 <atanf>
 8004626:	eef0 7a40 	vmov.f32	s15, s0
 800462a:	2c01      	cmp	r4, #1
 800462c:	d012      	beq.n	8004654 <__ieee754_atan2f+0xe8>
 800462e:	2c02      	cmp	r4, #2
 8004630:	d017      	beq.n	8004662 <__ieee754_atan2f+0xf6>
 8004632:	2c00      	cmp	r4, #0
 8004634:	d0ad      	beq.n	8004592 <__ieee754_atan2f+0x26>
 8004636:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800469c <__ieee754_atan2f+0x130>
 800463a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800463e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80046a0 <__ieee754_atan2f+0x134>
 8004642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004646:	e7a4      	b.n	8004592 <__ieee754_atan2f+0x26>
 8004648:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8004690 <__ieee754_atan2f+0x124>
 800464c:	e7ed      	b.n	800462a <__ieee754_atan2f+0xbe>
 800464e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80046a4 <__ieee754_atan2f+0x138>
 8004652:	e7ea      	b.n	800462a <__ieee754_atan2f+0xbe>
 8004654:	ee17 3a90 	vmov	r3, s15
 8004658:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800465c:	ee07 3a90 	vmov	s15, r3
 8004660:	e797      	b.n	8004592 <__ieee754_atan2f+0x26>
 8004662:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800469c <__ieee754_atan2f+0x130>
 8004666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800466a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80046a0 <__ieee754_atan2f+0x134>
 800466e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004672:	e78e      	b.n	8004592 <__ieee754_atan2f+0x26>
 8004674:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80046a0 <__ieee754_atan2f+0x134>
 8004678:	e78b      	b.n	8004592 <__ieee754_atan2f+0x26>
 800467a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80046a8 <__ieee754_atan2f+0x13c>
 800467e:	e788      	b.n	8004592 <__ieee754_atan2f+0x26>
 8004680:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80046a4 <__ieee754_atan2f+0x138>
 8004684:	e785      	b.n	8004592 <__ieee754_atan2f+0x26>
 8004686:	bf00      	nop
 8004688:	c0490fdb 	.word	0xc0490fdb
 800468c:	bfc90fdb 	.word	0xbfc90fdb
 8004690:	3fc90fdb 	.word	0x3fc90fdb
 8004694:	08004708 	.word	0x08004708
 8004698:	080046fc 	.word	0x080046fc
 800469c:	33bbbd2e 	.word	0x33bbbd2e
 80046a0:	40490fdb 	.word	0x40490fdb
 80046a4:	00000000 	.word	0x00000000
 80046a8:	3f490fdb 	.word	0x3f490fdb

080046ac <_init>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr

080046b8 <_fini>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr
